/**
 * Delete an element from array by finding it's index through equality.
 *
 * @param arr Array to operate on.
 * @param item Item to delete.
 */
export declare function removeItemFromArrayByMutation<T>(arr: T[], item: T): void;
/**
 * Mutate an array by inserting a new item on a new position.
 *
 * If position is -1, then we put the item at the end of the array.
 *
 * @param arr Array on which we operate
 * @param item Item to insert
 * @param position Position at which we insert
 */
export declare function insertItemInArrayByMutation<T>(arr: T[], item: T, position: number): void;
/**
 * Rearrange one item of an array and return a new array with changed order.
 *
 * To can be -1, in which case, it will be pushed at the end of the array.
 *
 * @param from Move item from.
 * @param to Move item to.
 * @param arr Original array.
 */
export declare function reOrderArrayByMutation<T>(from: number, to: number, arr: T[]): void;
/**
 * Replace a single item in an array by mutation
 *
 * @param arr Array to replace at.
 * @param index Position at which we want to replace.
 * @param item Item to replace with.
 */
export declare function replaceItemInArrayByMutation<T>(arr: T[], index: number, item: T): void;
/**
 * Delete one item from an array by index, by mutation.
 *
 * If position is -1, then we delete from the end of the array.
 *
 * @param arr Array to delete from.
 * @param index Position at which to delete.
 */
export declare function deleteItemInArrayByMutation<T>(arr: T[], index: number): void;
/**
 * Shuffle an array.
 *
 * @param array The array to shuffle
 */
export declare function shuffleArray<U, T extends Array<U>>(array: T): void;
