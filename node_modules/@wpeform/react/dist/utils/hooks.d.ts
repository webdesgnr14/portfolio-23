/// <reference types="react" />
/**
 * React hook to persist state changes to localstorage.
 *
 * @param key LocalStorage key.
 * @param initialValue Initial value of the state.
 */
export declare function useLocalStorage<T>(key: string, initialValue: T): readonly [T, (value: T) => void];
/**
 * A hook to immediately invoke or schedule a function for given delay through
 * `useEffect` hook.
 *
 * @param callback Function to call after timeout, must be memoized.
 * @param delay Delay in seconds, could be 0.
 * @param cancel If you pass true, it will cancel the invokation
 */
export declare function useScheduledInvoke(callback: () => void, delay: number, cancel?: boolean): void;
/**
 * Hook to scroll a Div when content changes.
 *
 * @param id Content for which to watch.
 */
export declare function useScrollOnContentChange(id: string | null | number): import("react").RefObject<HTMLDivElement>;
export default function useForceUpdate(): () => void;
