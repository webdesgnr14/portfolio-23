import { SettingsAppearanceControlTypeEnum } from "../apollo/generated/types/graphql-global-types";
export declare function getCurrentUrl(): string;
export declare function getCurrentOrigin(): string;
export declare function getUrlWithReplacedQueryString(qs: string): string;
export declare function addQueryParamToUrl(url: string, qs: Record<string, string>): string;
/**
 * Get parent element of an element. Accounts for shadow root in path.
 *
 * @param element Current element node.
 * @returns ParentNode or undefined.
 */
export declare function getParentElement(element: HTMLElement): HTMLElement | null;
/**
 * Get scroll parents of an element. Accounts for shadow root in path.
 *
 * @param element Current element.
 * @returns Array of scroll parents.
 */
export declare function scrollParents(element: HTMLElement): (Window | HTMLElement)[];
/**
 * Get theme from an HTML element's dataset attribute.
 *
 * @param holder The HTML element from where we extract the theme.
 * @returns Theme Id (safe).
 */
export declare function getThemeFromDataSet(holder: HTMLElement): string;
/**
 * Get the control type enum from an HTML element's dataset attribute.
 *
 * @param holder HTML Element.
 * @returns Sanitized and safe controlType.
 */
export declare function getControlTypeFromDataSet(holder: HTMLElement): SettingsAppearanceControlTypeEnum;
/**
 * Safely extract CSS Handles from the dataset of an HTML element.
 *
 * @param holder HTML Element
 * @returns CSS Handles.
 */
export declare function getCssHandlesFromDataSet(holder: HTMLElement): string[];
/**
 * Get a string label value from an HTML element's dataset.
 *
 * @param holder HTML Element.
 * @param accessor DataSet accessor.
 * @param defaultValue Default label, if nothing is found.
 * @returns Safe label value.
 */
export declare function getStringFromDataSet(holder: HTMLElement, accessor: string, defaultValue: string): string;
/**
 * Get number value from an HTML Element's dataset.
 *
 * @param holder HTML Element.
 * @param accessor Dataset accessor.
 * @param defaultValue Default value.
 * @param greaterThan Greater than.
 * @returns safe number value.
 */
export declare function getIntFromDataSet(holder: HTMLElement, accessor: string, defaultValue: number, greaterThan: number): number;
/**
 * Get JSON parsed value from an HTML element's dataset.
 *
 * @param holder HTML Element.
 * @param accessor Dataset accessor.
 * @param defaultValue Default value to return if fails.
 * @returns JSON parsed value.
 */
export declare function getJSONFromDataSet(holder: HTMLElement, accessor: string, defaultValue: any): any;
export declare function isSmartTouchDevice(): boolean;
export declare const logger: {
    readonly style: {
        readonly wpEForm: "background-color: #0967D2; color: #ffffff; padding: 4px;";
        readonly success: "background-color: #0F8613; color: #ffffff; padding: 4px;";
        readonly error: "background-color: #CF1124; color: #ffffff; padding: 4px;";
        readonly reset: "background-color: transparent; color: inherit; padding: 0;";
    };
    readonly labels: {
        readonly wpEForm: "WPEFORM";
        readonly err: "ERROR";
    };
    readonly log: (...args: any[]) => void;
    readonly debug: (input: string, type?: 'l' | 'e') => void;
    readonly l: (input: string, ...styles: string[]) => void;
    readonly e: (input: string) => void;
};
/**
 * Check if declarative shadow dom is supported.
 *
 * @returns true if supported, false otherwise
 */
export declare function supportsDeclarativeShadowDOM(): boolean;
export declare function polyfilDeclarativeShadowDom(holder: HTMLElement): void;
export declare function getHydrationSlot(holder: HTMLElement): {
    slotProvider: HTMLElement;
    renderIn: HTMLElement;
    canHydrate: boolean;
};
