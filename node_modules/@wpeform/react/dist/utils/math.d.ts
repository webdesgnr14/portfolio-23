/**
 * Get a random value between two integers. Both min and max are inclusive.
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values_inclusive
 */
export declare function getRandomInt(min: number, max: number): number;
/**
 * Get numeric value from a possibly number. Uses parseFloat.
 *
 * @param possibleNum Possibly number variable.
 * @param defaultValue Default value to return if variable is not a number.
 */
export declare function getNumericValue(possibleNum: any, defaultValue?: number): number;
/**
 * Get integer value from a possibly number which should be greater than the
 * provided. Otherwise, return the default one.
 *
 * @param possibleNum Possibly number variable.
 * @param defaultValue Default value to return.
 * @param greaterThan Must be greater than this value.
 */
export declare function getIntValueGreaterThan(possibleNum: any, defaultValue: number, greaterThan?: number): number;
/**
 * Get a positive integer value by parsing a variable. If the number is not a
 * number or if it is negative, then 0 is returned.
 *
 * @param possibleNum Possibly number variable.
 */
export declare function getPositiveIntValue(possibleNum: any): number;
/**
 * Precie a number to a decimal point.
 *
 * @param num The number to convert to precision.
 * @param precision Decimal precision.
 */
export declare function formatNumber(num: number | undefined | null, precision: number, decimalSeparator?: string, thousandsSeparator?: string): string;
/**
 * Get hours, minutes, seconds from a timestamp difference.
 *
 * @param timestampDiff Timestamp difference in milliseconds.
 * @param format Whether string format or number format.
 */
export declare function getHoursMinutesSeconds(timestampDiff: number, format: 'number'): {
    hours: number;
    minutes: number;
    seconds: number;
};
export declare function getHoursMinutesSeconds(timestampDiff: number, format?: 'string'): {
    hours: string;
    minutes: string;
    seconds: string;
};
/**
 * Round a number to a given precision.
 *
 * @link https://stackoverflow.com/a/11832950/2754557
 * @param num Input number.
 * @param precision Decimal precision.
 * @returns Rounded value.
 */
export declare function roundNumber(num: number, precision?: number): number;
/**
 * Parse and get a float value from a possibly number. If given value is not
 * a number or is not finite, then fallback is returned.
 *
 * @param possiblyNum Possibly number.
 * @param fallback Fallback value if parsing fails. Default is 0.
 * @returns Parsed number.
 */
export declare function getFloatValue(possiblyNum: any, fallback?: number): number;
/**
 * Check whether a value is in steps.
 *
 * @param value Currently selected value.
 * @param step Step increase/decrease.
 * @param start Start value to calculate for step, default 0.
 * @param precision Decimal precision to calculate.
 * @returns boolean True if in step, false otherwise.
 */
export declare function validateValueInStep(value: number, step: number, start?: number, precision?: number): boolean;
/**
 * Get the nearest value which is in step of the given boundaries.
 *
 * @param value Currently selected value.
 * @param step Step increase/decrease.
 * @param start Start value to calculate for step, default 0.
 * @param precision Decimal precision to calculate.
 * @returns nearest number in step (preferably less than the given value).
 */
export declare function getNearestValueInStep(value: number, step: number, start: number, precision?: number): number;
