import type { FormElementConfigMcqOptionInput } from "../apollo/generated/types/graphql-global-types";
/**
 * Deeply omit a key from an object. Useful for removing __typename
 * from GraphQL queries before sending to the server.
 *
 * @link {https://gist.github.com/Billy-/d94b65998501736bfe6521eadc1ab538}
 *
 * @param value The original Object or Array.
 * @param key The key to omit from the object.
 */
export declare function omitDeep(value: any, key: string): any;
export declare type ObjectWithId = {
    id: string;
};
/**
 * Find an item in a haystack by Id.
 *
 * @param arr The haystack array.
 * @param id Id by which to search.
 */
export declare function findInArrayById<T extends ObjectWithId>(arr: T[], id: string): [T, number] | undefined;
/**
 * Get `id` from an object to be used as key.
 *
 * Useful for using as `getKey` in `ArrayField` or similar. The object (`item`)
 * must have a property `id` with unique string value.
 *
 * @param item The item from which we need to get the Id key.
 */
export declare function getIdKey<T extends ObjectWithId>(item: T): string;
/**
 * Get items which are chosen, in order of the original list.
 *
 * @param ids Chosen Ids, can be out of order.
 * @param items Items, must be in order.
 */
export declare function getChosenItemsInOrder<T extends ObjectWithId>(ids: string[], items: T[]): T[];
/**
 * Deep copy an object with JSON function.
 *
 * This would work only if none of the elements of the object is a function.
 *
 * @param obj The input object
 */
export declare function deepCopyWithJson<T extends object>(obj: T): T;
/**
 * Delete one item from an array by index.
 *
 * This is a pure function and would return a new array.
 *
 * @param arr Array to delete from.
 * @param index Position at which to delete.
 */
export declare function deleteItemInArray<T>(arr: T[], index: number): T[];
/**
 * Remove an item from an array of items. It removes by doing a equality check.
 */
export declare function removeItemInArray<T>(arr: T[], item: T): T[];
/**
 * Add a new item in an array at specified position.
 * If the position is -1, then we add at the end of the array.
 *
 * This is a pure function and would return a new array.
 *
 * @param arr Array to insert at.
 * @param index Position at which to insert.
 * @param item The item to insert.
 */
export declare function insertItemInArray<T>(arr: T[], index: number, item: T): T[];
/**
 * Replace a single item in an array.
 *
 * This is a pure function and would return a new array.
 *
 * @param arr Array to replace at.
 * @param index Position at which we want to replace.
 * @param item Item to replace with.
 */
export declare function replaceItemInArray<T>(arr: T[], index: number, item: T): T[];
/**
 * Rearrange one item of an array and return a new array with changed order.
 *
 * To can be -1, in which case, it will be pushed at the end of the array.
 *
 * @param from Move item from.
 * @param to Move item to.
 * @param arr Original array.
 */
export declare function reOrderArray<T>(from: number, to: number, arr: T[]): T[];
/**
 * Replace config of an item in an array of items. It will override the config
 * over existing config on a shallow copy. The function is pure and won't
 * change any arguments.
 *
 * @param items Array of items.
 * @param id Lookup id
 * @param newItem object with properties to replace existing ones with.
 */
export declare function replaceItemPropertiesInArray<T extends ObjectWithId>(items: T[], id: string, newItem: Partial<T>): T[];
export declare function createShallowCopyWithChildren<T extends {
    [x: string]: any[] | any;
}>(obj: T, key?: keyof T): T;
export declare function paginateArray<T>(arr: T[], pageSize: number, pageNumber: number): T[];
/**
 * Deduplicate an array.
 *
 * @param arr Input array.
 */
export declare function deDupArray<T>(arr: T[]): T[];
/**
 * Checks if two arrays have exactly the same items.
 *
 * @param arr1 Array one.
 * @param arr2 Array two.
 * @returns
 */
export declare function areArraysEqual<T>(arr1: T[], arr2: T[]): boolean;
/**
 * Truncate a string to a specified length. It also removes line breaks.
 *
 * @param str String to truncate.
 * @param length The length to which we truncate.
 */
export declare function truncateString(str: string, length?: number): string;
/**
 * Get paramter value from a URL seach string. It returns the value as-is.
 * It could be either a string or an array of string.
 *
 * @param search Search string from URL.
 * @param key Lookup key.
 */
export declare function getUrlParameterValue(search: string, key: string): string | string[] | null;
/**
 * Match a label value with a list of MCQ Options. If a match is found, return
 * the id of the option from the option list.
 *
 * @param options MCQ Options List.
 * @param values Value of label to compare with.
 */
export declare function matchValuesAgainstOptionLabel(options: FormElementConfigMcqOptionInput[] | undefined, values: string | string[]): string[];
/**
 * Get option ids from a comma delimited value.
 *
 * @param value Input value, comma delimited.
 * @param isSingle Whether or not only a single value is allowed
 * @returns Option ids list.
 */
export declare function getOptionIdsFromString(value: string, isSingle?: boolean): string[];
/**
 * Decode JSON record safely.
 *
 * @param json JSON value.
 */
export declare function decodeJSONRecord(json?: string | null): Record<string, any> | null;
/**
 * Check the storage data integrity.
 *
 * We store complex data to a string in the following shape
 *
 * ```ts
 * {
 * 	type: string;
 * 	data: DataType;
 * }
 * ```
 *
 * This function checks if json has `type` and `data` property and `type` matches
 * given type.
 *
 * @param json Parsed JSON value.
 * @param type Type to look up for.
 * @returns True if successful, false otherwise.
 */
export declare function verifyJsonDataStructureForStorage(json: any, type: string): boolean;
/**
 * Checks whether a value is null or empty string.
 *
 * @param input Value to check against.
 */
export declare function isNullOrEmptyString(input: string | null | undefined): boolean;
/**
 * Check if SOME of the given properties of the object, does have a
 * value included in parameter.
 *
 * @param obj Object to check against.
 * @param keys properties of objects to check.
 * @param values Values to check against.
 */
export declare function checkObjectPropertiesSomeHaveValue<T extends Record<string, any>>(obj: T, keys: (keyof T)[], values: any[]): boolean;
/**
 * Check if ALL of the given properties of the object, does have a
 * value included in parameter.
 *
 * @param obj Object to check against.
 * @param keys properties of objects to check.
 * @param values Values to check against.
 */
export declare function checkObjectPropertiesAllHaveValue<T extends Record<string, any>>(obj: T, keys: (keyof T)[], values: any[]): boolean;
export declare function getNextItemInArray<T>(currentItem: T, items: T[]): T;
export declare function getOrderlyIndexedItemInArray<T>(index: number, items: T[]): T;
