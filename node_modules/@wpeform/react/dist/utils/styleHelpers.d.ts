/// <reference types="react" />
import { DefaultTheme } from 'styled-components';
import { ComponentSize } from '@rehooks/component-size';
import type { SpringConfig } from '@react-spring/core';
/**
 * Get a BEM compatible className given baseclass and modifiers.
 *
 * @param baseClass Main className.
 * @param modifiers Key=>Value pair of modifiers.
 * @param additionalClasses Additional classes we need to include.
 */
export declare function getBemClassName(baseClass: string, modifiers?: {
    [x: string]: boolean;
}, additionalClasses?: string | (string | undefined)[]): string;
export declare function getBemElement(baseClass: string, elm: string, additionalClasses?: string): string;
/**
 * See if current size of the container matches the breakpoint for the given
 * target.
 *
 * @param size Component size.
 * @param target Target size we are looking for.
 */
export declare function useIsResponsiveBreakpoint(size: ComponentSize, target: 'mobile' | 'tablet' | 'desktop' | 'desktopHd' | number): boolean;
/**
 * A hook to get breakpoint class names with BEM formatting. You need to pass
 * the size of the responsive container yourself.
 *
 * @param size component size.
 * @param baseClass base class for BEM.
 * @param additionalModifiers Extra modifiers for BEM classes.
 * @param additionalClasses Extra classNames.
 */
export declare function useResponsiveClassNames(size: ComponentSize, baseClass: string, additionalModifiers?: {
    [x: string]: boolean;
}, additionalClasses?: string | (string | undefined)[]): string;
/**
 * Given a number add the unit next to it so that it can be used as a CSS
 * value. Useful for creating font-size, padding, margin etc from numbers.
 *
 * @param size Font Size.
 * @param unit (Optional) CSS Unit, defaults to `'px'`.
 */
export declare function numToCssSize(size: number, unit?: 'px' | 'em' | 'rem' | '%' | 's' | 'ms'): string;
/**
 * Convert hex color with rgba with added opacity.
 *
 * @link [MODIFIED] {https://gist.github.com/danieliser/b4b24c9f772066bcf0a6}
 * @param color Hex color code, no shorthand, needs full 6 digit code.
 * @param opacity Opacity w.r.t 100.
 */
export declare function hexWithOpacity(color: string, opacity: number): string;
/**
 * Get multiple transition for CSS transition property.
 *
 * @param properties List of CSS Properties.
 * @param transition Transition value.
 */
export declare function getMultipleTransition(properties: string[], transition: string): string;
export declare function getMultipleTransitionsWithWillChange(properties: string[], transition: string, additionalWillChanges?: string[]): string;
export declare type parsedColorType = {
    r: number;
    g: number;
    b: number;
    a?: number;
};
export declare function cleanRgbValue(val: number): number;
export declare function cleanAlphaValue(val: number): number;
/**
 * Parse valid hex, rgb and rgba color string into object value for easier
 * manipulations.
 *
 * @param color Color string.
 */
export declare function parseColorString(color: string): parsedColorType;
export declare function getRgbaColorFromParsedValue(color: parsedColorType): string;
export declare function isColorLight(color: Omit<parsedColorType, 'a'> | string): boolean;
export declare function yiq(color: Omit<parsedColorType, 'a'> | string, options?: {
    white: string;
    black: string;
}): string;
export declare const cssReset: import("styled-components").FlattenSimpleInterpolation;
export declare const inputCssReset: import("styled-components").FlattenSimpleInterpolation;
export declare const textAreaCssReset: import("styled-components").FlattenSimpleInterpolation;
export declare const proseCss: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<DefaultTheme>>;
/**
 * @link https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
 */
export declare const longWordBreakCss: import("styled-components").FlattenSimpleInterpolation;
export declare const textEllipsisCss: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<{
    maxWidth?: string | undefined;
}, DefaultTheme>>;
export declare const userInputWhiteSpace: import("styled-components").FlattenSimpleInterpolation;
/**
 * Get style value for alignment of an element.
 *
 * @param align Type of align.
 */
export declare function getStyleWithAlignment(align: 'left' | 'center' | 'right' | 'justify' | undefined): React.CSSProperties | undefined;
/**
 * Get next even number for the given number.
 *
 * @param num Number to check.
 */
export declare function getNextEvenNumber(num: number): number;
/**
 * Get Background and Foreground color to be used with skeletons.
 */
export declare function useBgFgColor(): readonly [string, string];
export declare const PRINTBODYCLASS = "wpEformPrintBody";
export declare function getGenericPrint(theme: DefaultTheme): string;
export declare const sharedScrollBarCss: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<DefaultTheme>>;
export declare const sharedHorizontalScrollBarCss: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<DefaultTheme>>;
export declare const scrollBarHorizontalCss: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<DefaultTheme>>;
export declare const sharedVerticalScrollBarCss: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<DefaultTheme>>;
export declare const scrollBarVerticalCss: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<DefaultTheme>>;
export declare const scrollBarBothCss: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<DefaultTheme>>;
export declare const screenReaderTextCss: import("styled-components").FlattenSimpleInterpolation;
export declare const buttonResetCss: import("styled-components").FlattenSimpleInterpolation;
export declare function useClampedSpringConfig(type: 'slow' | 'general' | 'stiff'): SpringConfig;
