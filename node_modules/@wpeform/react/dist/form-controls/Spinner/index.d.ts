import React from 'react';
import { GenericSizeEnum, SettingsAppearanceControlAlignmentEnum, SettingsAppearanceControlTypeEnum } from "../../apollo/generated/types/graphql-global-types";
import { GenericControlProps } from "../utils/types";
export declare const CONTROLCLASS = "wpeform-control-number";
export declare type SpinnerProps = GenericControlProps & {
    /**
     * Placeholder of an empty input. Could be simple string in which case we
     * will use regular placeholder attribute. Or in complex cases, we will
     * provide material like placeholder animation on focus.
     */
    placeholder?: React.ReactNode;
    /**
     * Input Prefix, to enhance it with for example Icon etc.
     */
    prefix?: React.ReactNode;
    /**
     * Type of the Input. Could be `"BOXY"` or `"MATERIAL"`.
     *
     * @default BOXY
     */
    controlType?: SettingsAppearanceControlTypeEnum;
    /**
     * Alignment of the placeholder.
     *
     * @default LEFT
     */
    controlAlignment?: SettingsAppearanceControlAlignmentEnum;
    /**
     * Value of the text field. This is a controlled component. So we don't
     * support the `defaultValue`.
     */
    value: number | null;
    /**
     * On change update function. It receives only the value and not the event.
     */
    onChange: (nextValue: number | null) => void;
    /**
     * On blur event. This is passed directly to the input.
     */
    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;
    /**
     * Size of the TextInput.
     *
     * @default GenericSizeEnum.DEFAULT;
     */
    size?: GenericSizeEnum;
    /**
     * Ref for the input element inside the component.
     */
    innerRef?: React.RefObject<HTMLInputElement>;
    /**
     * Minimum value. When type is number.
     *
     * @default 0
     */
    min?: number;
    /**
     * Maximum value. When type is number.
     *
     * @default Infinity
     */
    max?: number;
    /**
     * Step value, when type is number.
     *
     * @default 1
     */
    step?: number;
    /**
     * Decimal precision.
     *
     * @default 2
     */
    precision?: number;
    /**
     * Whether or not the value is nullable.
     */
    isNullable?: boolean;
};
export default function Number(props: SpinnerProps): JSX.Element;
