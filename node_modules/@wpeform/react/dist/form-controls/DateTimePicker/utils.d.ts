import React from 'react';
import { SettingsAppearanceControlAlignmentEnum, SettingsAppearanceControlTypeEnum } from "../../apollo/generated/types/graphql-global-types";
import { GenericControlProps } from "../utils/types";
import dayjs from "../../utils/dayjs";
export declare type DateType = 'YYYYMMDD' | 'YYYYDDMM' | 'MMDDYYYY' | 'DDMMYYYY';
export declare type TimeType = '12hrs' | '24hrs';
export declare const generalDateTimeParseFormat = "YYYY-MM-DD HH:mm:ss";
export declare type DateTimePickerStateType = {
    year: number | null;
    month: number | null;
    day: number | null;
    hour: number | null;
    minute: number | null;
    second: number | null;
    am: boolean | null;
};
export declare type DateTimePickerProps = Omit<GenericControlProps, 'ariaLabel' | 'ariaLabelledby' | 'name'> & {
    /**
     * Type of the picker. Could be date, datetime or time.
     */
    pickerType: 'date' | 'datetime' | 'time';
    /**
     * DateTime format used for parsing and updating value.
     *
     * @default 'YYYY-MM-DD HH:mm:ss' or 'YYYY-MM-DD' or 'HH:mm:ss' depending on
     * pickerType.
     */
    dateTimeFormat?: string;
    /**
     * Date format type.
     *
     * @default MMDDYYYY
     */
    dateType?: DateType;
    /**
     * Time format type.
     *
     * @default 12hrs
     */
    timeType?: TimeType;
    /**
     * Whether or not to hide the seconds input field.
     *
     * @default false
     */
    hideSeconds?: boolean;
    /**
     * Date Separator.
     *
     * @default '/'
     */
    dateSeparator?: string;
    /**
     * Time separator.
     *
     * @default ':'
     */
    timeSeparator?: string;
    /**
     * Separator between date and time.
     *
     * @default ','
     */
    dateTimeSeparator?: string;
    /**
     * Minimum value in the same format.
     */
    minValue?: string;
    /**
     * Maximum value in the same format.
     */
    maxValue?: string;
    /**
     * Input Prefix, to enhance it with for example Icon etc.
     */
    prefix?: React.ReactNode;
    /**
     * Whether or not to show input labels.
     *
     * @default true
     */
    showInputLabels?: boolean;
    /**
     * Type of the Input. Could be `"BOXY"` or `"MATERIAL"`.
     *
     * @default BOXY
     */
    controlType?: SettingsAppearanceControlTypeEnum;
    /**
     * Alignment of the placeholder.
     *
     * @default LEFT
     */
    controlAlignment?: SettingsAppearanceControlAlignmentEnum;
    /**
     * Value of the datetime field, should be in given format.
     * This is a controlled component. So we don't support the `defaultValue`.
     */
    value: string;
    /**
     * On change update function. It receives only the value and not the event.
     */
    onChange: (nextValue: string) => void;
    /**
     * On blur event. This is called only when datetime input is complete.
     */
    onBlur?: () => void;
};
export declare function getStateFromDayjsObj(dayjsObj: dayjs.Dayjs, pickerType: DateTimePickerProps['pickerType'], timeType: NonNullable<DateTimePickerProps['timeType']>, hideSeconds: boolean): DateTimePickerStateType;
export declare function getStateFromValue(value: string, pickerType: DateTimePickerProps['pickerType'], format: string, timeType: NonNullable<DateTimePickerProps['timeType']>, hideSeconds: boolean): DateTimePickerStateType;
export declare function getDayJsObjFromState(state: DateTimePickerStateType, pickerType: DateTimePickerProps['pickerType'], timeType: NonNullable<DateTimePickerProps['timeType']>, hideSeconds: boolean): dayjs.Dayjs;
export declare function isStateErroneous(state: DateTimePickerStateType, pickerType: DateTimePickerProps['pickerType'], timeType: NonNullable<DateTimePickerProps['timeType']>): boolean;
export declare function isStateEmpty(state: DateTimePickerStateType, pickerType: DateTimePickerProps['pickerType']): boolean;
export declare function getUpdateValueFromState(state: DateTimePickerStateType, pickerType: DateTimePickerProps['pickerType'], format: string, timeType: NonNullable<DateTimePickerProps['timeType']>, hideSeconds: boolean): string;
