import { ReactNode } from 'react';
import { GenericControlProps } from "../utils/types";
import { SettingsAppearanceControlAlignmentEnum, SettingsAppearanceControlTypeEnum } from "../../apollo/generated/types/graphql-global-types";
export declare const CONTROLCLASS = "wpeform-control-address";
export declare type AddressFields = 'fieldOne' | 'fieldTwo' | 'city' | 'country' | 'state' | 'zip';
export declare const addressFieldsInOrder: AddressFields[];
export declare type FieldsType = {
    [key in AddressFields]: string;
};
export declare type AddressProps = {
    /**
     * Address fields. Must be a dictionary with all fields in AddressFields.
     */
    fields: FieldsType;
    /**
     * Different field configuration.
     */
    configuration: {
        [key in AddressFields]: {
            enabled: boolean;
            placeholder?: string;
        };
    };
    /**
     * Whether or not countries list is loading
     */
    countriesLoading?: boolean;
    /**
     * Countries list to populate.
     */
    countries: {
        id: string;
        value: string;
        label: string;
        plain: string;
        icon: ReactNode;
    }[];
    /**
     * Whether or not there has been error loading countries.
     */
    countriesError?: boolean;
    /**
     * Whether or not states list is loading
     */
    statesLoading?: boolean;
    /**
     * States list to populate.
     */
    states: {
        id: string;
        value: string;
        label: string;
        plain: string;
    }[];
    /**
     * Whether or not there has been error loading states.
     */
    statesError?: boolean;
    /**
     * Updater function. Passes one field at a time.
     */
    updateField: (newFields: Partial<FieldsType>) => void;
    /**
     * Whether or not to disable all icons.
     */
    disableAllIcons?: boolean;
    /**
     * Type of the Input. Could be `"BOXY"` or `"MATERIAL"`.
     *
     * @default BOXY
     */
    controlType?: SettingsAppearanceControlTypeEnum;
    /**
     * Alignment of the placeholder.
     *
     * @default LEFT
     */
    controlAlignment?: SettingsAppearanceControlAlignmentEnum;
    /**
     * Callback when selecting a country. Useful for loading states async.
     */
    onSelectCountry?: (newValue: string) => void;
    /**
     * OnBlur handler. Useful for setting element touched.
     */
    onBlur?: () => void;
} & Omit<GenericControlProps, 'disabled' | 'ariaLabel' | 'ariaLabelledby'>;
export default function Address(props: AddressProps): JSX.Element;
