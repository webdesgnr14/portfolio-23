import React from 'react';
import { GenericControlProps } from "../utils/types";
import { GenericSizeEnum, SelectTypeEnum, SettingsAppearanceControlAlignmentEnum, SettingsAppearanceControlTypeEnum } from "../../apollo/generated/types/graphql-global-types";
import { CONTROLCLASS } from './styled';
export { CONTROLCLASS };
export declare type SelectValueType = string | number | null | undefined;
export declare type SelectItem<T extends SelectValueType> = {
    /**
     * Value of the item.
     */
    value: T;
    /**
     * Rich Label of the item.
     */
    label: React.ReactNode;
    /**
     * Plain text version of the item.
     */
    plain: string;
};
export declare type SelectProps<T extends SelectValueType> = Omit<GenericControlProps, 'readOnly'> & {
    /**
     * Dropdown Mode, "SINGLE" or "MULTIPLE".
     */
    mode: SelectTypeEnum;
    /**
     * Placeholder of dropdown when no elements are selected.
     */
    placeholder: React.ReactNode | string;
    /**
     * Show search on the dropdown.
     *
     * @default true
     */
    showSearch?: boolean;
    /**
     * Search box placeholder.
     */
    searchPlaceholder?: string;
    /**
     * Message shown when the search result is empty.
     */
    emptyResultPlaceholder?: string;
    /**
     * Dropdown Prefix, to enhance it with for example Icon etc.
     */
    prefix?: React.ReactNode;
    /**
     * Type of the Dropdown. Could be `"BOXY"` or `"MATERIAL"`.
     *
     * @default BOXY
     */
    controlType?: SettingsAppearanceControlTypeEnum;
    /**
     * Alignment of the placeholder.
     *
     * @default LEFT
     */
    controlAlignment?: SettingsAppearanceControlAlignmentEnum;
    /**
     * Size of the control.
     *
     * @default GenericSizeEnum.DEFAULT
     */
    size?: GenericSizeEnum;
    /**
     * Whether or not can clear existing value.
     *
     * @default true
     */
    canClear?: boolean;
    /**
     * Currently selected values. An empty array also means, no items are selected.
     */
    value: T[];
    /**
     * onChange handler. Passes the newly selected values.
     */
    onChange: (nexVal: T[]) => void;
    /**
     * On Blur event handler. This is called, when the dropdown is opened and
     * then closed.
     */
    onBlur?: () => void;
    /**
     * Dropdown items.
     *
     * ```ts
     * type DropdownItem = {
     *   value: string;
     *   label: React.ReactNode;
     *   plain: string;
     * }
     * ```
     */
    items: SelectItem<T>[];
    /**
     * Give a minimum menu width to the dropdown.
     */
    minMenuWidth?: number;
    /**
     * Whether or not the state should be loading
     */
    loading?: boolean;
    /**
     * Called when dropdown opens.
     */
    onOpen?: () => void;
    /**
     * Called when dropdown closes.
     */
    onClose?: () => void;
};
/**
 * A dropdown control element used to replace HTML select. It is enhanced with
 * a combobox feature and has proper appearance on mobile and desktop devices.
 * The component is always controlled.
 *
 * Regardless of the mode, it always accepts and passes an array of string for
 * the selected values. If mode is set to single, the component will make sure
 * that the array only has one value in the `onChange` handler.
 *
 * @param props component props.
 */
export default function Select<T extends SelectValueType>(props: SelectProps<T>): JSX.Element;
