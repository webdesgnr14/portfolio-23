import React, { ReactNode } from 'react';
import { TextProps } from "../Text";
import { TableProps } from "../../components/Table";
export declare const CONTROLCLASS = "wpeform-control-matrix-input";
export declare type MatrixInputColumn = {
    id: string;
    title: ReactNode;
    width?: string | null;
};
export declare type MatrixInputRow = {
    id: string;
    title: ReactNode;
};
export declare type MatrixInputValue = {
    rowId: string;
    columnId: string;
    value: string;
}[];
export declare type MatrixInputProps = {
    /**
     * Additional classNames.
     */
    className?: string | (string | undefined)[];
    /**
     * Rows for matrix.
     *
     * ```ts
     * type MatrixInputRow = {
     * 	id: string;
     * 	title: ReactNode;
     * }
     * ```
     */
    rows: MatrixInputRow[];
    /**
     * Columns for matrix.
     *
     * ```ts
     * type MatrixInputColumn = {
     * 	id: string;
     * 	title: ReactNode;
     * 	width?: string;
     * }
     * ```
     */
    columns: MatrixInputColumn[];
    /**
     * Dictionary value of matrix.
     *
     * Should be accessible by `value[rowId][columnId]`.
     */
    value: MatrixInputValue;
    /**
     * On Change function.
     */
    onChange: (rowId: string, columnId: string, newValue: string) => void;
    /**
     * Whether or not input should be multiline.
     *
     * @default false
     */
    multiline?: boolean;
    /**
     * Width of row heading.
     *
     * @default 180px
     */
    rowHeadingWidth?: string;
    /**
     * On blur event. This is passed directly to the input.
     */
    onBlur?: (event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
    /**
     * Style of matrix table.
     *
     * @default stripped
     */
    tableType?: TableProps['type'];
    /**
     * Prefix for HTML name. Complete name is calculated by
     * `${namePrefix}[${rowId}][${colId}]`
     */
    namePrefix?: string;
    /**
     * Icons used to decorate input text/textarea.
     */
    icon?: string;
} & Pick<TextProps, 'placeholder' | 'prefix' | 'controlType' | 'controlAlignment' | 'size' | 'readOnly' | 'disabled' | 'hasError'> & Partial<Pick<TableProps, 'fixedLayout' | 'highlightOnHover'>>;
export default function MatrixInput(props: MatrixInputProps): JSX.Element;
