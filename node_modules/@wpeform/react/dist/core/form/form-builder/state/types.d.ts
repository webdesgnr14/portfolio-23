import { FormElementInput, FormElementAppearanceInput, FormStructureConfigInput, FormElementConfigInput, WidthPresetsEnum } from "../../../../apollo/generated/types/graphql-global-types";
import { Dictionary } from "../../../../utils/dictionary";
import { UpdateFormVariables } from '../graphql/gql-types/UpdateForm';
/**
 * The type of the input being passed to dispatcher. This one doesn't have
 * isDirty, because this is being handled internally.
 */
export declare type FormReducerInputType = {
    name: UpdateFormVariables['data']['name'];
    categories: UpdateFormVariables['data']['categories'];
    elements: Dictionary<FormElementInput>;
    integrations: UpdateFormVariables['data']['integrations'];
    payments: UpdateFormVariables['data']['payments'];
    conditionals: UpdateFormVariables['data']['conditionals'];
    editors: UpdateFormVariables['data']['editors'];
    permissions: UpdateFormVariables['data']['permissions'];
    pools: UpdateFormVariables['data']['pools'];
    settings: UpdateFormVariables['data']['settings'];
    structures: UpdateFormVariables['data']['structures'];
    styles: UpdateFormVariables['data']['styles'];
};
/**
 * The actual state of the reducer. This one has isDirty to manage the
 * dirty state.
 */
export declare type FormReducerStateType = FormReducerInputType & {
    isDirty: boolean;
    undos: FormReducerInputType[];
    redos: FormReducerInputType[];
};
declare type ElementParentType = 'element' | 'structure' | 'pool';
/**
 * Payload needed to rearrange element
 */
export declare type RearrangeElementPayload = {
    elementId: string;
    sourceType: ElementParentType;
    sourceParentId: string;
    sourceIndex: number;
    destinationType: ElementParentType;
    destinationParentId: string;
    destinationIndex: number;
};
/**
 * Payload needed to update structure config
 */
export declare type UpdateStructureConfigPayload = {
    id: string;
    config: NonNullable<FormStructureConfigInput>;
};
/**
 * Payload needed to delete an element
 */
export declare type DeleteElementPayload = {
    elementId: string;
    parentId: string;
    parentType: RearrangeElementPayload['sourceType'];
};
/**
 * Payload needed to add new element to structure
 */
export declare type AddNewElementToStructurePayload = {
    structureId: string;
    element: NonNullable<FormElementInput>;
    position: number;
};
export declare type AddNewElementToElementPayload = {
    elementId: string;
    element: NonNullable<FormElementInput>;
    position: number;
};
export declare type AddNewElementToPoolPayload = {
    poolId: string;
    element: NonNullable<FormElementInput>;
    position: number;
};
export declare type UpdateElementAppearancePayload = {
    elementId: string;
    appearance: FormElementAppearanceInput;
};
export declare type UpdateElementConfigAndAppearancePayload = {
    elementId: string;
    appearance: FormElementAppearanceInput;
    config: FormElementConfigInput;
};
export declare type DuplicateStructurePayload = {
    strIndex: number;
    newId: string;
};
export declare type RearrangeStructurePayload = {
    from: number;
    to: number;
};
export declare type RearrangePoolPayload = {
    from: number;
    to: number;
};
export declare type UpdateElementAppearanceTitleSubtitlePayload = {
    elementId: string;
    newValue: string;
};
export declare type DuplicateElementPayload = {
    elementId: string;
    elementPosition: number;
    parentId: string;
    parentType: ElementParentType;
};
export declare type SetStylesPayload = Partial<NonNullable<FormReducerInputType['styles']>>;
export declare type SetSettingsPayload = Partial<NonNullable<FormReducerInputType['settings']>>;
export declare type SetPaymentsPayload = Partial<NonNullable<FormReducerInputType['payments']>>;
export declare type SetPermissionsPayload = Partial<NonNullable<FormReducerInputType['permissions']>>;
export declare type SetIntegrationsPayload = Partial<NonNullable<FormReducerInputType['integrations']>>;
export declare type SetConditionalsPayload = FormReducerInputType['conditionals'];
export declare type AddNewStructurePayload = {
    id: string;
    position?: number;
};
export declare type AddNewPoolPayload = {
    id: string;
    position?: number;
};
export declare type UpdatePoolConfigPayload = {
    id: string;
    config: {
        name: string;
    };
};
export declare type DuplicatePoolPayload = {
    poolIndex: number;
    newId: string;
};
export declare type DeletePoolPayload = {
    id: string;
};
export declare type UserDataSettingsPayload = {
    id: string;
};
export declare type UpdateElementValidationRequiredPayload = {
    elementId: string;
    required: boolean;
};
export declare type UpdateElementInitiallyHiddenPayload = {
    elementId: string;
    initiallyHidden: boolean;
};
export declare type UpdateElementColumnSizePayload = {
    elementId: string;
    columnSize: WidthPresetsEnum;
};
/**
 * Actions for dispatch. All works with FormReducerInputType, not the
 * FormReducerStateType because isDiry should be managed internally.
 */
export declare type FormReducerAction = {
    type: 'SET_NAME';
    payload: string;
} | {
    type: 'SET_DATA';
    payload: FormReducerInputType;
} | {
    type: 'SET_CATEGORIES';
    payload: FormReducerInputType['categories'];
} | {
    type: 'SET_EDITORS';
    payload: FormReducerInputType['editors'];
} | {
    type: 'SET_STYLES';
    payload: SetStylesPayload;
} | {
    type: 'SET_SETTINGS';
    payload: SetSettingsPayload;
} | {
    type: 'SET_PAYMENTS';
    payload: SetPaymentsPayload;
} | {
    type: 'SET_PERMISSIONS';
    payload: SetPermissionsPayload;
} | {
    type: 'SET_INTEGRATIONS';
    payload: SetIntegrationsPayload;
} | {
    type: 'SET_CONDITIONALS';
    payload: SetConditionalsPayload;
} | {
    type: 'SET_DIRTY';
    payload: boolean;
} | {
    type: 'ADD_NEW_STRUCTURE';
    payload: AddNewStructurePayload;
} | {
    type: 'RECONFIGURE_STRUCTURES';
    payload: NonNullable<FormReducerInputType['structures']>;
} | {
    type: 'UPDATE_STRUCTURES_CONFIG';
    payload: UpdateStructureConfigPayload;
} | {
    type: 'ADD_NEW_ELEMENT_TO_STRUCTURE';
    payload: AddNewElementToStructurePayload;
} | {
    type: 'ADD_NEW_ELEMENT_TO_ELEMENT';
    payload: AddNewElementToElementPayload;
} | {
    type: 'ADD_NEW_ELEMENT_TO_POOL';
    payload: AddNewElementToPoolPayload;
} | {
    type: 'REARRANGE_ELEMENT';
    payload: RearrangeElementPayload;
} | {
    type: 'DELETE_ELEMENT';
    payload: DeleteElementPayload;
} | {
    type: 'DUPLICATE_ELEMENT';
    payload: DuplicateElementPayload;
} | {
    type: 'UPDATE_ELEMENT_APPEARANCE';
    payload: UpdateElementAppearancePayload;
} | {
    type: 'UPDATE_ELEMENT_CONFIG_AND_APPEARANCE';
    payload: UpdateElementConfigAndAppearancePayload;
} | {
    type: 'UPDATE_ELEMENT_APPEARANCE_TITLE';
    payload: UpdateElementAppearanceTitleSubtitlePayload;
} | {
    type: 'UPDATE_ELEMENT_APPEARANCE_SUBTITLE';
    payload: UpdateElementAppearanceTitleSubtitlePayload;
} | {
    type: 'UPDATE_ELEMENT_VALIDATION_REQUIRED';
    payload: UpdateElementValidationRequiredPayload;
} | {
    type: 'UPDATE_ELEMENT_INITIALLY_HIDDEN';
    payload: UpdateElementInitiallyHiddenPayload;
} | {
    type: 'UPDATE_ELEMENT_COLUMN_SIZE';
    payload: UpdateElementColumnSizePayload;
} | {
    type: 'DELETE_STRUCTURE';
    payload: string;
} | {
    type: 'DUPLICATE_STRUCTURE';
    payload: DuplicateStructurePayload;
} | {
    type: 'REARRANGE_STRUCTURE';
    payload: RearrangeStructurePayload;
} | {
    type: 'REARRANGE_POOL';
    payload: RearrangePoolPayload;
} | {
    type: 'ADD_NEW_POOL';
    payload: AddNewPoolPayload;
} | {
    type: 'UPDATE_POOL_CONFIG';
    payload: UpdatePoolConfigPayload;
} | {
    type: 'DUPLICATE_POOL';
    payload: DuplicatePoolPayload;
} | {
    type: 'DELETE_POOL';
    payload: DeletePoolPayload;
} | {
    type: 'SET_USERDATA_FIRST_NAME';
    payload: UserDataSettingsPayload;
} | {
    type: 'SET_USERDATA_LAST_NAME';
    payload: UserDataSettingsPayload;
} | {
    type: 'SET_USERDATA_EMAIL';
    payload: UserDataSettingsPayload;
} | {
    type: 'SET_USERDATA_PHONE';
    payload: UserDataSettingsPayload;
} | {
    type: 'UNDO';
    payload: null;
} | {
    type: 'REDO';
    payload: null;
};
/**
 * Store type to be used with zustand createStore
 */
export declare type FormStoreType = FormReducerStateType & {
    dispatch: (action: FormReducerAction) => void;
};
export {};
