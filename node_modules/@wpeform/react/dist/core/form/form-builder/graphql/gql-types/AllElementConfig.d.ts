import { ButtonOpenTypeEnum, GenericAlignmentEnum, GenericSizeEnum, OptionColumnEnum, EventComparisonEnum, EventOperationEnum, ScoreOperationEnum, PrefilEnum, ValidationFilterTypeEnum, SelectTypeEnum, HeadingSizeEnum, HeadingTagEnum, MaskTypeEnum } from "../../../../../apollo/generated/types/graphql-global-types";
export interface AllElementConfig_buttons_attributes {
    __typename: "FormElementButtonsConfigAttributesType";
    open: ButtonOpenTypeEnum;
    popupHeight: number;
    popupWidth: number;
}
export interface AllElementConfig_buttons_buttons {
    __typename: "FormElementConfigButtonType";
    id: string;
    icon: string;
    label: string;
    link: string;
}
export interface AllElementConfig_buttons_interface {
    __typename: "FormElementButtonsConfigInterfaceType";
    alignment: GenericAlignmentEnum;
    colored: boolean;
    size: GenericSizeEnum;
    style: string;
    rounded: boolean;
}
export interface AllElementConfig_buttons {
    __typename: "FormElementButtonsConfigType";
    attributes: AllElementConfig_buttons_attributes | null;
    buttons: AllElementConfig_buttons_buttons[];
    interface: AllElementConfig_buttons_interface | null;
}
export interface AllElementConfig_checkbox_interface_options {
    __typename: "FormElementConfigMcqOptionType";
    answerDescription: string | null;
    id: string;
    label: string;
    num: number | null;
}
export interface AllElementConfig_checkbox_interface {
    __typename: "FormElementCheckboxConfigInterfaceType";
    icon: string;
    columns: OptionColumnEnum;
    options: AllElementConfig_checkbox_interface_options[];
    others: boolean;
    othersId: string;
    shuffle: boolean;
}
export interface AllElementConfig_checkbox_score_scoreConditions {
    __typename: "ElementScoreConditionType";
    compareWith: string;
    condition: EventComparisonEnum;
    id: string;
    operation: EventOperationEnum;
    scoreId: string;
    scoreOperation: ScoreOperationEnum;
    scoreValue: number;
}
export interface AllElementConfig_checkbox_score {
    __typename: "FormElementConfigScoreType";
    scoreConditions: AllElementConfig_checkbox_score_scoreConditions[];
}
export interface AllElementConfig_checkbox_attributes {
    __typename: "FormElementConfigAttributesType";
    defaultValue: string;
    prefilParameter: string;
    prefilType: PrefilEnum;
    readonly: boolean;
}
export interface AllElementConfig_checkbox_validation_filters {
    __typename: "FormElementConfigFiltersType";
    type: ValidationFilterTypeEnum | null;
    /**
     * Minimum number of choices.
     */
    minItems: number | null;
    /**
     * Maximum number of choices.
     */
    maxItems: number | null;
    /**
     * Minimum length for string type input.
     */
    minString: number | null;
    /**
     * Maximum length for string type input.
     */
    maxString: number | null;
    /**
     * Minimum value for number type input.
     */
    minNum: number | null;
    /**
     * Maximum value for number type input.
     */
    maxNum: number | null;
}
export interface AllElementConfig_checkbox_validation {
    __typename: "FormElementCheckboxConfigValidationType";
    required: boolean;
    filters: AllElementConfig_checkbox_validation_filters;
}
export interface AllElementConfig_checkbox {
    __typename: "FormElementCheckboxConfigType";
    interface: AllElementConfig_checkbox_interface | null;
    score: AllElementConfig_checkbox_score;
    attributes: AllElementConfig_checkbox_attributes;
    validation: AllElementConfig_checkbox_validation | null;
}
export interface AllElementConfig_dropdown_interface_options {
    __typename: "FormElementConfigMcqOptionType";
    answerDescription: string | null;
    id: string;
    label: string;
    num: number | null;
}
export interface AllElementConfig_dropdown_interface {
    __typename: "FormElementDropdownConfigInterfaceType";
    options: AllElementConfig_dropdown_interface_options[];
    othersId: string;
    others: boolean;
    shuffle: boolean;
}
export interface AllElementConfig_dropdown_attributes {
    __typename: "FormElementConfigAttributesType";
    defaultValue: string;
    prefilParameter: string;
    prefilType: PrefilEnum;
    readonly: boolean;
}
export interface AllElementConfig_dropdown_score_scoreConditions {
    __typename: "ElementScoreConditionType";
    compareWith: string;
    condition: EventComparisonEnum;
    id: string;
    operation: EventOperationEnum;
    scoreId: string;
    scoreOperation: ScoreOperationEnum;
    scoreValue: number;
}
export interface AllElementConfig_dropdown_score {
    __typename: "FormElementConfigScoreType";
    scoreConditions: AllElementConfig_dropdown_score_scoreConditions[];
}
export interface AllElementConfig_dropdown_validation_filters {
    __typename: "FormElementConfigFiltersType";
    type: ValidationFilterTypeEnum | null;
    /**
     * Minimum number of choices.
     */
    minItems: number | null;
    /**
     * Maximum number of choices.
     */
    maxItems: number | null;
    /**
     * Minimum length for string type input.
     */
    minString: number | null;
    /**
     * Maximum length for string type input.
     */
    maxString: number | null;
    /**
     * Minimum value for number type input.
     */
    minNum: number | null;
    /**
     * Maximum value for number type input.
     */
    maxNum: number | null;
}
export interface AllElementConfig_dropdown_validation {
    __typename: "FormElementDropdownConfigValidationType";
    filters: AllElementConfig_dropdown_validation_filters;
    required: boolean;
    selectType: SelectTypeEnum;
}
export interface AllElementConfig_dropdown {
    __typename: "FormElementDropdownConfigType";
    interface: AllElementConfig_dropdown_interface | null;
    attributes: AllElementConfig_dropdown_attributes;
    score: AllElementConfig_dropdown_score;
    validation: AllElementConfig_dropdown_validation | null;
}
export interface AllElementConfig_heading_interface {
    __typename: "FormElementHeadingConfigInterfaceType";
    alignment: GenericAlignmentEnum;
    divider: boolean;
    icon: string;
    showTop: boolean;
    size: HeadingSizeEnum;
    tag: HeadingTagEnum;
}
export interface AllElementConfig_heading {
    __typename: "FormElementHeadingConfigType";
    interface: AllElementConfig_heading_interface | null;
}
export interface AllElementConfig_radio_interface_options {
    __typename: "FormElementConfigMcqOptionType";
    answerDescription: string | null;
    id: string;
    label: string;
    num: number | null;
}
export interface AllElementConfig_radio_interface {
    __typename: "FormElementRadioConfigInterfaceType";
    columns: OptionColumnEnum;
    icon: string;
    othersId: string;
    options: AllElementConfig_radio_interface_options[];
    others: boolean;
    shuffle: boolean;
}
export interface AllElementConfig_radio_attributes {
    __typename: "FormElementConfigAttributesType";
    defaultValue: string;
    prefilParameter: string;
    prefilType: PrefilEnum;
    readonly: boolean;
}
export interface AllElementConfig_radio_score_scoreConditions {
    __typename: "ElementScoreConditionType";
    compareWith: string;
    condition: EventComparisonEnum;
    id: string;
    operation: EventOperationEnum;
    scoreId: string;
    scoreOperation: ScoreOperationEnum;
    scoreValue: number;
}
export interface AllElementConfig_radio_score {
    __typename: "FormElementConfigScoreType";
    scoreConditions: AllElementConfig_radio_score_scoreConditions[];
}
export interface AllElementConfig_radio_validation {
    __typename: "FormElementRadioConfigValidationType";
    required: boolean;
}
export interface AllElementConfig_radio {
    __typename: "FormElementRadioConfigType";
    interface: AllElementConfig_radio_interface | null;
    attributes: AllElementConfig_radio_attributes;
    score: AllElementConfig_radio_score;
    validation: AllElementConfig_radio_validation | null;
}
export interface AllElementConfig_text_interface {
    __typename: "FormElementTextConfigInterfaceType";
    icon: string;
    placeholder: string;
}
export interface AllElementConfig_text_attributes {
    __typename: "FormElementConfigAttributesType";
    defaultValue: string;
    prefilParameter: string;
    prefilType: PrefilEnum;
    readonly: boolean;
}
export interface AllElementConfig_text_score_scoreConditions {
    __typename: "ElementScoreConditionType";
    compareWith: string;
    condition: EventComparisonEnum;
    id: string;
    operation: EventOperationEnum;
    scoreId: string;
    scoreOperation: ScoreOperationEnum;
    scoreValue: number;
}
export interface AllElementConfig_text_score {
    __typename: "FormElementConfigScoreType";
    scoreConditions: AllElementConfig_text_score_scoreConditions[];
}
export interface AllElementConfig_text_validation_filters {
    __typename: "FormElementConfigFiltersType";
    type: ValidationFilterTypeEnum | null;
    /**
     * Minimum number of choices.
     */
    minItems: number | null;
    /**
     * Maximum number of choices.
     */
    maxItems: number | null;
    /**
     * Minimum length for string type input.
     */
    minString: number | null;
    /**
     * Maximum length for string type input.
     */
    maxString: number | null;
    /**
     * Minimum value for number type input.
     */
    minNum: number | null;
    /**
     * Maximum value for number type input.
     */
    maxNum: number | null;
}
export interface AllElementConfig_text_validation_masks_maskRegExps {
    __typename: "FormElementConfigMaskRegExpType";
    caseSensitive: boolean;
    id: string;
    pattern: string;
}
export interface AllElementConfig_text_validation_masks {
    __typename: "FormElementConfigMasksType";
    alwaysShowMask: boolean;
    /**
     * Predefined mask.
     */
    maskPreset: string | null;
    /**
     * List of regular expressions in sequence.
     */
    maskRegExps: AllElementConfig_text_validation_masks_maskRegExps[];
    /**
     * Mask from user input.
     */
    maskString: string | null;
    maskType: MaskTypeEnum | null;
    placeholder: string;
}
export interface AllElementConfig_text_validation {
    __typename: "FormElementTextConfigValidationType";
    filters: AllElementConfig_text_validation_filters;
    masks: AllElementConfig_text_validation_masks;
    required: boolean;
}
export interface AllElementConfig_text {
    __typename: "FormElementTextConfigType";
    interface: AllElementConfig_text_interface | null;
    attributes: AllElementConfig_text_attributes;
    score: AllElementConfig_text_score;
    validation: AllElementConfig_text_validation | null;
}
export interface AllElementConfig_textarea_interface {
    __typename: "FormElementTextareaConfigInterfaceType";
    icon: string;
    placeholder: string;
}
export interface AllElementConfig_textarea_attributes {
    __typename: "FormElementConfigAttributesType";
    defaultValue: string;
    prefilParameter: string;
    prefilType: PrefilEnum;
    readonly: boolean;
}
export interface AllElementConfig_textarea_score_scoreConditions {
    __typename: "ElementScoreConditionType";
    compareWith: string;
    condition: EventComparisonEnum;
    id: string;
    operation: EventOperationEnum;
    scoreId: string;
    scoreOperation: ScoreOperationEnum;
    scoreValue: number;
}
export interface AllElementConfig_textarea_score {
    __typename: "FormElementConfigScoreType";
    scoreConditions: AllElementConfig_textarea_score_scoreConditions[];
}
export interface AllElementConfig_textarea_validation_filters {
    __typename: "FormElementConfigFiltersType";
    type: ValidationFilterTypeEnum | null;
    /**
     * Minimum number of choices.
     */
    minItems: number | null;
    /**
     * Maximum number of choices.
     */
    maxItems: number | null;
    /**
     * Minimum length for string type input.
     */
    minString: number | null;
    /**
     * Maximum length for string type input.
     */
    maxString: number | null;
    /**
     * Minimum value for number type input.
     */
    minNum: number | null;
    /**
     * Maximum value for number type input.
     */
    maxNum: number | null;
}
export interface AllElementConfig_textarea_validation {
    __typename: "FormElementTextareaConfigValidationType";
    required: boolean;
    filters: AllElementConfig_textarea_validation_filters;
}
export interface AllElementConfig_textarea {
    __typename: "FormElementTextareaConfigType";
    interface: AllElementConfig_textarea_interface | null;
    attributes: AllElementConfig_textarea_attributes;
    score: AllElementConfig_textarea_score;
    validation: AllElementConfig_textarea_validation | null;
}
export interface AllElementConfig {
    __typename: "FormElementConfigType";
    buttons: AllElementConfig_buttons | null;
    checkbox: AllElementConfig_checkbox | null;
    dropdown: AllElementConfig_dropdown | null;
    heading: AllElementConfig_heading | null;
    radio: AllElementConfig_radio | null;
    text: AllElementConfig_text | null;
    textarea: AllElementConfig_textarea | null;
}
