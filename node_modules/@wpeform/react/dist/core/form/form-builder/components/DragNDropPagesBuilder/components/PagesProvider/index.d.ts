import React from 'react';
import { DragDropContextProps } from 'react-beautiful-dnd';
export declare type PagesProviderPage = {
    id: string;
    title: string;
};
export declare type PagesProviderPropsType = {
    noPagesNotice: React.ReactNode;
    onAddNewPage: (position?: number) => string;
    addNewPageLabel: React.ReactNode;
    pages: PagesProviderPage[];
    pageIcon: React.ComponentType<any>;
    activePage: string | null;
    onSetActivePage: (val: string | null) => void;
    onSetConfigWindow: (id: string, index: number) => void;
    onDuplicatePage: (id: string, index: number) => string;
    isPageDeleteDisabled: (id: string, index: number) => boolean;
    deleteConfirmMessage: React.ReactNode;
    onDeletePage: (id: string, index: number) => void;
    onPagesDragEnd: DragDropContextProps['onDragEnd'];
    elements: string[];
} | null;
export declare function usePagesProvider(): {
    noPagesNotice: React.ReactNode;
    onAddNewPage: (position?: number | undefined) => string;
    addNewPageLabel: React.ReactNode;
    pages: PagesProviderPage[];
    pageIcon: React.ComponentType<any>;
    activePage: string | null;
    onSetActivePage: (val: string | null) => void;
    onSetConfigWindow: (id: string, index: number) => void;
    onDuplicatePage: (id: string, index: number) => string;
    isPageDeleteDisabled: (id: string, index: number) => boolean;
    deleteConfirmMessage: React.ReactNode;
    onDeletePage: (id: string, index: number) => void;
    onPagesDragEnd: (result: import("react-beautiful-dnd").DropResult, provided: import("react-beautiful-dnd").ResponderProvided) => void;
    elements: string[];
};
export declare function PagesProvider(props: {
    children: React.ReactNode;
    providers: NonNullable<PagesProviderPropsType>;
}): JSX.Element;
