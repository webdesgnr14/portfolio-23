import { UseStore, StoreApi } from 'zustand';
import { FormSubmissionElementInput } from "../../../../apollo/generated/types/graphql-global-types";
import { Dictionary } from "../../../../utils/dictionary";
import { formElementConditionalMapContextType, submissionFormDataContextType } from '../contexts/data';
import { FormForSubmission_formMeta } from '../graphql/gql-types/FormForSubmission';
/**
 * An enhanced state type for individual elements in form submission. Apart
 * from all of items from GraphQL, we have a few extra to handle errors.
 */
export declare type submissionElementStateType = FormSubmissionElementInput & {
    /**
     * Element type.
     */
    type: string;
    /**
     * Whether or not the element is touched. Is used to show errors on the
     * question container.
     */
    touched: boolean;
    /**
     * Current errors for the element.
     */
    errors: string[];
};
/**
 * Type for `elements` in submission data.
 */
export declare type submissionElementsType = Dictionary<submissionElementStateType>;
export declare type submissionStructureStateType = {
    /**
     * Id of the structure (page)
     */
    id: string;
    /**
     * Whether or not it is conditionally hidden.
     */
    conditionallyHidden: boolean;
    /**
     * Whether or not it is initially hidden.
     */
    initiallyHidden: boolean;
};
export declare type submissionStructuresType = Dictionary<submissionStructureStateType>;
/**
 * State type for form submission related data. In case when the form is
 * rendering, we don't need to store the form itself in a state, because it
 * won't be mutating at all. Rather just expect FormReducerInputType from
 * form builder.
 */
export declare type submissionReducerStateType = {
    /**
     * Form ID for which we create the store.
     */
    formId: number | string;
    /**
     * Structures data. Basically deals with whether a page is conditionally
     * hidden.
     */
    structures: submissionStructuresType;
    /**
     * Current Page of the paginated form. This would start with 0 of course.
     */
    currentPage: string;
    /**
     * Make elements a record instead of array for performance and lookup. This
     * is the element submission.
     */
    elements: submissionElementsType;
    /**
     * Form submission start time in timestamp (javascript) millisecond.
     */
    startTime: number;
    /**
     * Admin remarks. This is used only when dealing with admin edits.
     */
    remarks: string;
    /**
     * Last touched element Id.
     */
    lastTouchedElement?: string;
};
export declare type setElementTouchedPayload = {
    elmId: string;
    touched: boolean;
};
/**
 * Actions for the reducers. This is made with respect to  real world usage,
 * things that we would actually call for different form related actions.
 */
export declare type submissionReducerAction = {
    type: 'SET_DATA';
    payload: submissionReducerStateType;
} | {
    type: 'SET_ELEMENT_DATA';
    payload: {
        elementId: string;
        elementSubmissionData: submissionElementStateType;
        conditionalsMap: formElementConditionalMapContextType;
        formData: submissionFormDataContextType;
        formMeta: FormForSubmission_formMeta;
    };
} | {
    type: 'SET_CURRENT_PAGE';
    payload: submissionReducerStateType['currentPage'];
} | {
    type: 'SET_ELEMENT_TOUCHED';
    payload: setElementTouchedPayload;
} | {
    type: 'SET_ELEMENTS_AND_STARTTIME';
    payload: {
        structures: submissionStructuresType;
        elements: submissionElementsType;
        startTime?: number;
        conditionalsMap: formElementConditionalMapContextType;
        formData: submissionFormDataContextType;
        formMeta: FormForSubmission_formMeta;
        fullReset: boolean;
    };
} | {
    type: 'SET_REMARKS';
    payload: {
        remarks: string;
    };
};
export declare type submissionStoreType = submissionReducerStateType & {
    dispatch: (action: submissionReducerAction) => void;
};
export declare type submissionStoreHookType = UseStore<submissionStoreType>;
export declare type submissionStoreApiType = StoreApi<submissionStoreType>;
