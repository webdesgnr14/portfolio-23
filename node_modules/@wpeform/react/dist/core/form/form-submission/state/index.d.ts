import React from 'react';
import { StoreApi } from 'zustand/vanilla';
import { StateSelector, UseStore } from 'zustand';
import { submissionReducerStateType, submissionStoreApiType, submissionStoreType } from './types';
/**
 * A localized submission store selector to access the store from closest
 * SubmissionStore and call it with the selector.
 *
 * @param selector Selector function for zustand store.
 */
export declare function useSubmissionStore<U>(selector: StateSelector<submissionStoreType, U>): U;
export declare function useSubmissionDispatch(): (action: import("./types").submissionReducerAction) => void;
export declare function useSubmissionStoreApi(): submissionStoreApiType;
export declare function submissionStoreElementsSelector(s: submissionStoreType): import("./types").submissionElementsType;
export declare function submissionStoreStartTimeSelector(s: submissionStoreType): number;
export declare function submissionStoreCurrentPageSelector(s: submissionStoreType): string;
export declare function submissionStoreRemarksSelector(s: submissionStoreType): string;
export declare function submissionStoreStructuresSelector(s: submissionStoreType): import("./types").submissionStructuresType;
export declare function submissionStoreLastTouchedElementIdSelector(s: submissionStoreType): string | undefined;
export declare type SubmissionStoreProps = {
    initialData: submissionReducerStateType;
    children: React.ReactNode;
};
/**
 * Submission Store component to take zustand store into a component life-cycle
 * instead of a singleton.
 *
 * We use class because we want this to be Fast Refresh compatible.
 */
export default class SubmissionStore extends React.Component<SubmissionStoreProps, {
    storeContextValue: [
        UseStore<submissionStoreType>,
        StoreApi<submissionStoreType>
    ];
}> {
    constructor(...args: any[]);
    render(): JSX.Element;
}
