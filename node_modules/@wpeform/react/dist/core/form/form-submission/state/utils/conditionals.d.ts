import type { WritableDraft } from 'immer/dist/internal';
import { ConditionalEventInput, ConditionalInput } from "../../../../../apollo/generated/types/graphql-global-types";
import { Dictionary } from "../../../../../utils/dictionary";
import { formElementConditionalMapContextType, submissionFormDataContextType, submissionFormDataElementType } from '../../contexts/data';
import { FormForSubmission_formMeta } from '../../graphql/gql-types/FormForSubmission';
import { submissionElementStateType, submissionReducerStateType } from '../types';
/**
 * Check if events of a logic are checked out.
 *
 * It takes into consideration that events are grouped against OR relation.
 *
 * @param events Logic events to check against.
 * @param elements Elements from current State.
 */
export declare function areLogicEventsCheckedOut(events: ConditionalEventInput[], elements: Dictionary<submissionElementStateType>, elementsData: Dictionary<submissionFormDataElementType>): boolean;
/**
 * Deeply reset an element's value and error. It also resets all its children.
 *
 * @param formMeta Form Meta as obtained from GraphQL.
 * @param formData Form Data.
 * @param elementId Element Id to reset (and it's children).
 * @param draftState draftState (immer produced) where we perform the operation.
 * @returns Affected elements.
 */
export declare function deepResetElementValueAndError(formMeta: FormForSubmission_formMeta, formData: submissionFormDataContextType, elementId: string, draftState: submissionReducerStateType): string[];
/**
 * Deeply reset all elements inside a structure.
 *
 * @param formMeta Form Meta as obtained from GraphQL.
 * @param formData Form Data.
 * @param structureId Structure Id to reset (and it's children).
 * @param draftState draftState (immer produced) where we perform the operation.
 * @returns Affected elements.
 */
export declare function deepResetStructureValueAndError(formMeta: FormForSubmission_formMeta, formData: submissionFormDataContextType, structureId: string, draftState: submissionReducerStateType): string[];
/**
 * Apply the consequences of a logic depending on whether or not events are
 * checked out.
 *
 * @param logic The logic of the form.
 * @param areEventsCheckedOut Are events of the logic checked out.
 * @param draftState immer produced draft state where we operate.
 * @param formData Form data.
 * @param formMeta Form meta from GraphQL query.
 * @param startElementId Element for which we apply the logic.
 * @returns Affected elements.
 */
export declare function applyLogicConsequences(logic: ConditionalInput, areEventsCheckedOut: boolean, draftState: submissionReducerStateType, formData: submissionFormDataContextType, formMeta: FormForSubmission_formMeta, startElementId: string): string[];
/**
 * Apply conditionals related to an element and mutate state accordingly.
 * This does not cascade and is only executed once even if it changes values.
 *
 * @param draftState Immer produced draftState where we operate.
 * @param elementId Id of the element for which we apply the logic.
 * @param conditionalsMap Shortcut map of conditionals.
 * @param formData Form data.
 * @param formMeta Form meta.
 * @param maxDepth Maximum depth upto which it will check.
 */
export declare function applyConditionals(draftState: WritableDraft<submissionReducerStateType>, elementId: string, conditionalsMap: formElementConditionalMapContextType, formData: submissionFormDataContextType, formMeta: FormForSubmission_formMeta, maxDepth?: number, startElement?: string | null): void;
/**
 * Refresh conditional state of all elements based on current draftState.
 *
 * @param draftState Immer produced draftState where we operate.
 * @param conditionalsMap Shortcut map of conditionals.
 * @param formData Form data.
 * @param formMeta Form meta.
 */
export declare function refreshAllConditionals(draftState: submissionReducerStateType, conditionalsMap: formElementConditionalMapContextType, formData: submissionFormDataContextType, formMeta: FormForSubmission_formMeta): void;
