/// <reference types="react" />
import type { MutationFunction } from '@apollo/client';
import { FormStructureInput, FormSubmissionElementInput, FormSubmissionElementValueInput } from "../../../apollo/generated/types/graphql-global-types";
import { Dictionary } from "../../../utils/dictionary";
import { submissionFormDataContextType, submissionFormDataElementType } from './contexts/data';
import { FormForSubmission, FormForSubmission_formMeta } from './graphql/gql-types/FormForSubmission';
import { submissionElementStateType, submissionElementsType, submissionReducerStateType, submissionStoreApiType, submissionStructuresType } from './state/types';
/**
 * Recursively extract element's children from an element. The concept is that
 * one element can have any number of children, which in turn can have any
 * number of children. We keep on extracting unless we hit a spot where number
 * of elements of a child element is zero.
 *
 * It also takes into consideration that an element could be conditionally
 * hidden. If so, then that element and it's children are not included in the
 * result.
 *
 * Should call this within some action callback, like changing tabs or submitting
 * the form. Because this depends on the storeApi directly, it will break react
 * re-render.
 *
 * @param submissionElements Submission elements data from store api or other sources.
 * @param elements Elements from Form Data.
 * @param elementId Element Id from which we need to extract children.
 */
export declare function recursivelyExtractConditionallyShownElementChildren(submissionElements: Dictionary<submissionElementStateType>, elements: submissionFormDataContextType['elements'], elementId: string): string[];
/**
 * Get all (recursively) active children of a page. This takesn into
 * consideration, that an element might be conditionally hidden. If an element
 * is hidden, then neither that element, not it's children are included in the
 * result.
 *
 * Should call this within some action callback, like changing tabs or submitting
 * the form. Because this depends on the storeApi directly, it will break react
 * re-render.
 *
 * @param currentPage Current page data.
 * @param elements Elements from Form.
 * @param submissionElements Elements of Submissions.
 */
export declare function getAllConditionallyShownChildrenOfCurrentPage(currentPage: FormStructureInput | undefined, elements: Dictionary<submissionFormDataElementType>, submissionElements: Dictionary<submissionElementStateType>): string[];
/**
 * Recursively extract all children of an element. This does not consider
 * whether any element is conditionally hidden or not.
 *
 * @param elementId Id of the element whose child is to be extracted.
 * @param formData Form Data.
 */
export declare function recursivelyGetChildrenOfElement(elementId: string, formData: submissionFormDataContextType): string[];
/**
 * Recursively get children of a page. It gets all the children and doesn't
 * consider whether they are conditionally hidden or not.
 *
 * @param pageId Page Id to get from structures.
 * @param formData Form Data as retrieved from GraphQL.
 */
export declare function recursivelyGetChildrenOfPage(pageId: string, formData: submissionFormDataContextType): string[];
/**
 * Check if elements are error free.
 *
 * @param storeElements Submission Elements from store API or other sources.
 * @param elementIds Ids of elements for which we check if those are error free.
 */
export declare function areElementsErrorFree(storeElements: Dictionary<submissionElementStateType>, elementIds: string[]): [boolean, string | null];
export declare function convertFormData(data: FormForSubmission): submissionFormDataContextType;
/**
 * Get element's default value and errors (based on element config).
 *
 * @param formMeta Form meta as obtained from GraphQL.
 * @param elementData Element data as obtained from Form GraphQL.
 * @param usePresetValue Whether or not to use preset value from config. Defaults false.
 */
export declare function getElementDefaultValueAndErrors(formMeta: FormForSubmission_formMeta, elementData: submissionFormDataElementType, usePresetValue?: boolean): {
    errors: string[];
    value: FormSubmissionElementValueInput;
};
/**
 * Get fresh set of structures data for submission after restoring them to the
 * initial values.
 *
 * @param formData Form Data as retrieved from GraphQL.
 * @returns structures to be used with form submission state.
 */
export declare function getActiveStructuresAfterReset(formData: submissionFormDataContextType): submissionStructuresType;
/**
 * Get fresh set of elements for submission after restoring them to the
 * initial values. This only gives the active elements, i.e, elements from the
 * structures. It doesn't not give away the elements from the pools.
 *
 * @param formData Form Data as retrieved from GraphQL.
 * @param formMeta Form Meta as retrieved from GraphQL.
 * @param usePresetValue Whether or not to use preset value from config. Defaults false.
 */
export declare function getActiveElementsAfterReset(formData: submissionFormDataContextType, formMeta: FormForSubmission_formMeta, usePresetValue?: boolean, initialData?: submissionReducerStateType): submissionElementsType;
export declare type UseFormSubmissionCallbackType = (elements: FormSubmissionElementInput[], time: number, remarks?: string) => ReturnType<MutationFunction>;
export declare function useFormSubmissionSubmit(callback: UseFormSubmissionCallbackType, formData: submissionFormDataContextType | null, canSubmit: boolean): {
    isMounted: import("react").MutableRefObject<boolean>;
    submitting: boolean;
    submitted: boolean;
    submittedState: "success" | "error" | "networkerror";
    submit: (api: submissionStoreApiType) => void;
    reset: () => void;
};
export declare const defaultInitialSubmissionData: submissionReducerStateType;
