/// <reference types="react" />
import { FormReducerInputType } from "../../form-builder/state";
import { FormElementInput } from "../../../../apollo/generated/types/graphql-global-types";
import { Dictionary } from "../../../../utils/dictionary";
import { FormForSubmission_formMeta } from '../graphql/gql-types/FormForSubmission';
export declare type submissionFormDataElementType = FormElementInput & {
    extras?: string | null;
};
export declare type submissionFormDataContextType = {
    name?: string;
    elements: Dictionary<submissionFormDataElementType>;
    conditionals: FormReducerInputType['conditionals'];
    pools: FormReducerInputType['pools'];
    settings: Partial<FormReducerInputType['settings']>;
    structures: FormReducerInputType['structures'];
    styles: FormReducerInputType['styles'];
};
export declare const submissionFormDataContext: import("react").Context<submissionFormDataContextType>;
export declare function useSubmissionFormData(): submissionFormDataContextType;
export declare type submissionFormMetaContextType = FormForSubmission_formMeta;
export declare const submissionFormMetaContext: import("react").Context<FormForSubmission_formMeta>;
export declare function useSubmissionFormMeta(): FormForSubmission_formMeta;
export declare type submissionFormRenderModeContextType = 'listview' | 'preview' | 'newsubmission' | 'useredit' | 'adminedit';
export declare const submissionFormRenderModeContext: import("react").Context<submissionFormRenderModeContextType>;
export declare function useSubmissionFormRenderMode(): submissionFormRenderModeContextType;
export declare const submissionForceShowErrorsContext: import("react").Context<boolean>;
export declare function useSubmissionForceShowErrors(): boolean;
export declare const activeErrorElementContext: import("react").Context<string | null>;
export declare function useActiveErrorElement(): string | null;
export declare type formNavActionsContextType = {
    canPrevious: boolean;
    goPrevious: () => void;
    canNext: boolean;
    goNext: () => void;
    canSubmit: boolean;
    submit: () => void;
    canReset: boolean;
    reset: () => void;
    submitting: boolean;
    submitted: boolean;
    submittedState: 'success' | 'error' | 'networkerror';
};
export declare const formNavActionsContext: import("react").Context<formNavActionsContextType>;
export declare function useFormNavActions(): formNavActionsContextType;
export declare type formElementConditionalMapContextType = {
    [elementId: string]: string[];
};
export declare const formElementConditionalMapContext: import("react").Context<formElementConditionalMapContextType>;
export declare function useFormElementConditionalMap(): formElementConditionalMapContextType;
