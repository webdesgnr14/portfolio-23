import React, { ReactNode } from 'react';
import type { ObjectSchema } from 'yup';
import { FormElementAppearanceInput, FormElementInput, FormElementConfigInput, SettingsAppearanceControlTypeEnum, SettingsAppearanceControlLayoutEnum, SettingsAppearanceControlAlignmentEnum, EventComparisonEnum, EventHasEnum, EventOperationEnum } from "../../../apollo/generated/types/graphql-global-types";
import { FormForBuilder_formMeta, FormForBuilder_formMeta_elements } from "../../form/form-builder/graphql/gql-types/FormForBuilder";
import { FormReducerAction } from "../../form/form-builder/state";
import { submissionElementStateType } from "../../form/form-submission/state/types";
import { submissionFormDataElementType } from "../../form/form-submission/contexts/data";
import type { PlansAvailable } from "../../../app/admin/utils/freemius";
export declare type possibleValueForAdminItemType = {
    value: string;
    label: string;
};
export declare type RegisteredElementsType = 'group' | 'row' | 'column' | 'heading' | 'buttons' | 'mathcalcgroup' | 'ratinggroup' | 'slidergroup' | 'rangegroup' | 'stackedgroup' | 'radio' | 'checkbox' | 'dropdown' | 'toggle' | 'slider' | 'range' | 'rating' | 'text' | 'textarea' | 'mathcalc' | 'captcha' | 'matrixchoice' | 'sortable' | 'datetimeinput' | 'matrixinput' | 'singlecheckbox' | 'address' | 'firstname' | 'lastname' | 'email' | 'phone';
export declare type AdminElementCollectionDefinedType = {
    id: RegisteredElementsType;
    image: string | null;
    icon: React.ComponentType<any>;
    searchString: string;
    type: 'choice' | 'input' | 'design' | 'security';
    neededPlan?: PlansAvailable;
    containerOrientation?: 'vertical' | 'horizontal';
    containerButtonLabel?: string;
    validationSchema: ObjectSchema<any> | null;
    adminUi: React.ComponentType<any> | null;
    getPossibleValues?: (config: FormElementConfigInput) => possibleValueForAdminItemType[];
    performStoreSideEffect?: (element: FormElementInput, dispatch: (action: FormReducerAction) => void, formMetaData: FormForBuilder_formMeta) => void;
    conditionalValueComparisonList?: EventComparisonEnum[];
    conditionalHasLengthComparison?: boolean;
    renderLogicalEventValueUi?: (elementData: FormElementInput, value: string, updateValue: (newValue: string) => void) => ReactNode;
    renderLogicalConsequenceSetValueUi?: (elementData: FormElementInput, value: string, updateValue: (newValue: string) => void) => ReactNode;
    getHelp?: () => ReactNode;
};
export declare type AdminElementCollectionDerivedType = {
    getNewElement: (elements: FormForBuilder_formMeta_elements[]) => FormElementInput;
    getName: (elements: FormForBuilder_formMeta_elements[]) => string;
    getDescription: (elements: FormForBuilder_formMeta_elements[]) => string;
    getIsContainer: (elements: FormForBuilder_formMeta_elements[]) => boolean;
};
export declare type AdminElementCollectionItemType = AdminElementCollectionDefinedType & AdminElementCollectionDerivedType;
/**
 * Admin UI Props for an Element's React Component.
 */
export declare type ElementAdminFormikValuesType<ElementConfig> = {
    appearance: FormElementAppearanceInput;
    config: ElementConfig;
};
export declare type ElementFrontFormUiProps = {
    /**
     * Id of the element from form data.
     */
    elmId: string;
    /**
     * Unique Id for the question.
     */
    id: string;
    /**
     * Configuration and appearance from Form Data.
     */
    elementData: submissionFormDataElementType;
    /**
     * Shortcut for properly rendered element title with SlateView and mentions.
     */
    elementTitle: React.ReactNode;
    /**
     * Control type that should be used for this element. This takes into
     * consideration the global type and element's appearance.
     */
    controlType: SettingsAppearanceControlTypeEnum;
    /**
     * Control layout that should be used for this element. This takes into
     * consideration the global layout and element's appearance.
     */
    controlLayout: SettingsAppearanceControlLayoutEnum;
    /**
     * Control alignment that should be used for this element. This takes into
     * consideration the global alignment and element's appearance.
     */
    controlAlignment: SettingsAppearanceControlAlignmentEnum;
    /**
     * Whether or not the component has errors.
     * @default false
     */
    hasError?: boolean;
    /**
     * Submission Data.
     */
    submissionData: submissionElementStateType;
    /**
     * Update submission data callback.
     */
    updateSubmissionData: (newSubmissionData: submissionElementStateType) => void;
    /**
     * Set whether element is touched or not.
     */
    setElementTouched: (isTouched?: boolean) => void;
    /**
     * The presentation of the element.
     *
     * @default regular
     */
    presentation: 'regular' | 'stacked';
};
/**
 * Collection Item for accessing UI (front, form render) of Element.
 */
export declare type ElementFrontCollectionType = {
    /**
     * The ID of the Element.
     */
    id: RegisteredElementsType;
    /**
     * UI for form element.
     */
    FormUi: React.ComponentType<ElementFrontFormUiProps>;
    /**
     * Needed plan to access this element.
     */
    neededPlan?: PlansAvailable;
    /**
     * Whether or not this element is a form question. If this is set to true
     * the system automatically wraps it in a `Components/Question` component.
     */
    isQuestion: boolean;
    /**
     * Whether or not the title of the question is hidden in `Components/Question`
     * component.
     */
    isQuestionTitleHidden?: boolean;
    /**
     * Whether or not this element has submission data.
     */
    hasSubmission: boolean;
    /**
     * Whether or not the question is required based on current configuration.
     */
    isRequired: (elementData: submissionFormDataElementType) => boolean;
    /**
     * Get validation errors for the element.
     */
    getErrors: (elementData: submissionFormDataElementType, submissionDataValue: submissionElementStateType['value']) => string[];
    /**
     * Get preset value from config.
     */
    getPresetValue?: (elementData: submissionFormDataElementType, defaultValue: submissionElementStateType['value']) => submissionElementStateType['value'];
    /**
     * Set value of an element programatically. This is primarily used in dealing
     * with conditional logic.
     *
     * There is no need to return anything, rather mutate the submissionDataValue
     * as it is passed through immer.
     */
    setValue: (newValue: string, elementData: submissionFormDataElementType, mutableSubmissionDataValue: submissionElementStateType['value']) => void;
    /**
     * Get display value for current submission data. This is used primarily in
     * mentions and rendering in submission tables.
     */
    getDisplayValue?: (elementData: submissionFormDataElementType, submissionDataValue: submissionElementStateType['value']) => React.ReactNode | null;
    /**
     * Get answer value. This is used for showing the submission preview.
     */
    getAnswerValue?: (elementData: submissionFormDataElementType, submissionDataValue: submissionElementStateType['value']) => React.ReactNode;
    /**
     * Get numeric value, given the element data and submission data value.
     * Used mainly in mathematical calculations.
     */
    getNumericValue?: (elementData: submissionFormDataElementType, submissionDataValue: submissionElementStateType['value']) => number;
    /**
     * Check whether the condition holds for the given data.
     */
    isConditionTrue?: (has: EventHasEnum, operation: EventOperationEnum, comparison: EventComparisonEnum, value: string, submissionDataValue: submissionElementStateType['value'], elementData: submissionFormDataElementType) => boolean;
    /**
     * Whether or not this element should be rendered in the grid without
     * any gutter.
     *
     * @default false
     */
    noGutter?: boolean;
};
