import { jsx } from 'react/jsx-runtime';
import { Suspense } from 'react';
import { y as Shadow, z as FormSkeleton } from '../index-chunk-wpeform-react-daf2eca0.js';
export { B as ButtonIconPositionEnum, a as ButtonOpenTypeEnum, C as ConsequenceActionEnum, D as DarkThemeModeEnum, E as EventComparisonEnum, b as EventHasEnum, c as EventOperationEnum, d as EventRelationEnum, F as FormElementCategoryEnum, e as FormPaginationRestrictionEnum, f as FormPaymentTypeEnum, g as FormPaymentsCouponTypeEnum, h as FormSettingsBackgroundAttachmentEnum, i as FormSettingsBackgroundOriginAndClipEnum, j as FormSettingsBackgroundRepeatEnum, k as FormSettingsLimitOnLoginEnum, G as GenericAlignmentEnum, l as GenericSizeEnum, H as HeadingSizeEnum, m as HeadingTagEnum, M as MaskTypeEnum, N as NumberComparisonEnum, O as OptionColumnEnum, P as PaginationTypeEnum, n as PrefilEnum, R as RedirectTypeEnum, o as ResourceViewModeEnum, S as ScoreFromToTypeEnum, p as ScoreOperationEnum, q as SelectTypeEnum, r as SettingsAppearanceContainerLayoutEnum, s as SettingsAppearanceControlAlignmentEnum, t as SettingsAppearanceControlLayoutEnum, u as SettingsAppearanceControlTypeEnum, v as SettingsAppearanceProgressBarPositionEnum, w as SubmissionStatIntervalEnum, x as SubmitTimerEnum, T as TrashEnum, V as ValidationFilterTypeEnum, W as WidthPresetsEnum } from '../index-chunk-wpeform-react-daf2eca0.js';
import { F as FallbackContainer, a as FrontEndErrorBoundary } from '../index-chunk-wpeform-react-b4d17b34.js';
export { p as parseStyleData, s as setupWPEFormGlobals } from '../setup-chunk-wpeform-react-9294b13c.js';
import 'styled-components';
import 'react-dom/server';
import 'react-is';
import 'query-string';
import '@react-spring/web';
import 'react-intersection-observer';
import 'zustand';
import '@fortawesome/fontawesome-svg-core';
import '@fortawesome/react-fontawesome';
import 'react-dom';

/**
 * Render with SSR support. If doing SSR, then show a skeleton, otherwise
 * render the real thing, with a suspense, so that it can be lazy imported.
 * The component tree is also wrapped inside a error boundary.
 *
 * @param props Component props.
 */
function RenderSsr(props) {
    const { controls, panels, themeStyle, inShadow = false, children } = props;
    const isSSR = typeof window === 'undefined';
    const loadingUi = (jsx(Shadow, Object.assign({ inShadow: inShadow, ssr: true }, { children: jsx(FallbackContainer, Object.assign({ themeStyle: themeStyle, ssr: true }, { children: jsx(FormSkeleton, { panels: panels, controls: controls }, void 0) }), void 0) }), void 0));
    // check for SSR
    if (isSSR) {
        return loadingUi;
    }
    return (jsx(FrontEndErrorBoundary, Object.assign({ themeStyle: themeStyle }, { children: jsx(Suspense, Object.assign({ fallback: loadingUi }, { children: children }), void 0) }), void 0));
}

export { RenderSsr };
