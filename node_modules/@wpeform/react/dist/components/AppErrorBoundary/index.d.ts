import { Component, ReactNode } from 'react';
export declare type FallbackFnType = (resetError: () => void, lastError: any) => ReactNode;
export declare type AppErrorBoundaryProps = {
    fallback: FallbackFnType;
};
export declare type AppErrorBoundaryState = {
    hasError: boolean;
    lastError: any;
};
export default class AppErrorBoundary extends Component<AppErrorBoundaryProps, AppErrorBoundaryState> {
    constructor(props: AppErrorBoundaryProps);
    static getDerivedStateFromError(error: any): {
        hasError: boolean;
        lastError: any;
    };
    componentDidCatch(error: any, errorInfo: any): void;
    resetError: () => void;
    render(): ReactNode;
}
