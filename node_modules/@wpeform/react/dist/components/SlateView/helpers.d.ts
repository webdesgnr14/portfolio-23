import React, { ReactNode } from 'react';
import { FormScoreDesignationInput, FormSettingsScoreInput } from "../../apollo/generated/types/graphql-global-types";
import { submissionFormDataElementType } from "../../core/form/form-submission/contexts/data";
import { submissionElementStateType } from "../../core/form/form-submission/state/types";
import { Dictionary } from "../../utils/dictionary";
import { SlateViewProps } from '.';
export declare type mentionsRecord = {
    [x: string]: ReactNode;
};
export declare type anchorRecord = {
    [x: string]: string;
};
export declare function useSlateJsonDynamicAnchors(jsonDynamicAnchors?: string | null, additionalAnchors?: anchorRecord): {
    [x: string]: string;
} | undefined;
export declare function useSlateJsonMentions(jsonMentions?: string | null, additionalMentions?: mentionsRecord): {
    [x: string]: React.ReactNode;
} | undefined;
/**
 * Helpers and utilities for WPEForm specific data
 */
export declare type scoreSubmissionType = {
    id: string;
    has: boolean;
    obtained: number;
    outof: number;
};
export declare function getDesignation(type: 'name' | 'description', designations: FormScoreDesignationInput[], score: scoreSubmissionType): null;
export declare type scoreItem = {
    scoreId: string;
    has: boolean;
    obtained: number;
    outof: number;
};
export declare function getScoreMentionsResult(mentionsCharacter: string, scoresObtained?: scoreItem[] | null, scoreSettings?: FormSettingsScoreInput | null): React.ReactNode;
export declare type submissionPrimitives = {
    ['::fName::']: string | null;
    ['::lName::']: string | null;
    ['::email::']: string | null;
    ['::phone::']: string | null;
};
export declare function getSlateMentionsOnElementsAndScore(elementId: string, elementsSubmissionData: Dictionary<submissionElementStateType>, elementsConfig: Dictionary<submissionFormDataElementType>, primitives: submissionPrimitives | null, scoreSettings?: FormSettingsScoreInput | null, scoresObtained?: scoreItem[] | null): React.ReactNode;
export declare type SlateViewWithDataProps = {
    mode?: SlateViewProps['mode'];
    nodes: SlateViewProps['nodes'];
    /**
     * Current Element Id, where this is being rendered. It is used to
     * prevent circular renders. You need to explicitly pass null if this is
     * not used within an element.
     */
    currentElementId: string | null;
    /**
     * JSON-ified data as received from GraphQL FormLimitationMessageType.mentions.
     * We use memo inside the component.
     */
    jsonMentions?: string | null;
    /**
     * Additional mentions to be used along with json mentions.
     */
    additionalMentions?: {
        [x: string]: React.ReactNode;
    };
    /**
     * JSON-ified data as received from GraphQL FormLimitationMessageType.dynamicAnchors.
     * We use memo inside the component.
     */
    jsonDynamicAnchorTags?: string | null;
    /**
     * Additional anchors to be used along with JSON dynamic anchors.
     */
    additionalAnchors?: {
        [x: string]: string;
    };
};
export declare function SlateViewWithData(props: SlateViewWithDataProps): JSX.Element;
export declare function SlateViewWithoutMentions(props: Pick<SlateViewWithDataProps, 'mode' | 'nodes'>): JSX.Element;
export declare function useNodesFromJson(json?: string | null): false | import("slate").Node[];
