import React, { ReactNode } from 'react';
import { SettingsAppearanceContainerLayoutEnum } from "../../apollo/generated/types/graphql-global-types";
import { ThemeStyle, useThemeStyleFromFormStyle, getThemeStyleFromFormStyle } from './useFormTheme';
export type { ThemeStyle };
export { useThemeStyleFromFormStyle, getThemeStyleFromFormStyle };
export declare function getStyleSheets(children: ReactNode): any;
export declare type ThemedContainerProps = {
    /**
     * Render mode. If live, then we add padding and add global styles, if preview, then we do not.
     */
    mode: 'live' | 'preview';
    /**
     * Theme style configuration.
     *
     * ```ts
     * type ThemeStyle = {
     *		scheme?: string;
     *		baseFont?: number;
     *		boldHeading?: boolean;
     *		italicHeading?: boolean;
     *		headFamily?: string;
     *		headFamilyCustom?: string;
     *		bodyFamily?: string;
     *		bodyFamilyCustom?: string;
     *		customPrimaryColor?: string | null;
     *		customSecondaryColor?: string | null;
     *		customBackgroundColor?: string | null;
     *		customTextColor?: string | null;
     *		css?: string | null;
     *		maxWidth?: string;
     *		containerLayout?: SettingsAppearanceContainerLayoutEnum;
     *	};
     * ```
     */
    themeStyle: ThemeStyle | null | undefined;
    /**
     * Children to render.
     */
    children: React.ReactNode;
    /**
     * Width override from themeStyle.
     */
    widthOverride?: string;
    /**
     * Container layout override from themeStyle.
     */
    containerLayoutOverride?: SettingsAppearanceContainerLayoutEnum;
    /**
     * Whether or not doing this for SSR.
     *
     * @default = false
     */
    ssr?: boolean;
};
/**
 * ThemedContainer component encapsulates themeStyle rendering along with a
 * observed responsive container.
 */
export default function ThemedContainer(props: ThemedContainerProps): JSX.Element;
