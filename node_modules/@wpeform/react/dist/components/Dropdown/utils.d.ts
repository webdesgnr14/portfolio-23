import { ReactNode, RefObject } from 'react';
import { GenericSizeEnum, SettingsAppearanceControlAlignmentEnum, SettingsAppearanceControlTypeEnum } from "../../apollo/generated/types/graphql-global-types";
export declare type DropdownProps = {
    /**
     * Label of the dropdown button.
     */
    buttonLabel: ReactNode;
    /**
     * Whether or not the button is grayed out.
     *
     * @default false
     */
    passiveButton?: boolean;
    /**
     * Render function for menu. It gets passed an argument which helps in
     * closing the dropdown.
     */
    menu: (closePortal: () => void) => ReactNode;
    /**
     * Whether or not the input control is disabled. Passed directly to HTML
     * `disabled` attribute.
     *
     * @default false
     */
    disabled?: boolean;
    /**
     * Additional className to be applied to the control.
     */
    className?: string;
    /**
     * Dropdown Prefix, to enhance it with for example Icon etc.
     */
    prefix?: React.ReactNode;
    /**
     * Type of the Dropdown. Could be `"BOXY"` or `"MATERIAL"`.
     *
     * @default BOXY
     */
    controlType?: SettingsAppearanceControlTypeEnum;
    /**
     * Alignment of the placeholder.
     *
     * @default LEFT
     */
    controlAlignment?: SettingsAppearanceControlAlignmentEnum;
    /**
     * Size of the component.
     *
     * @default GenericSizeEnum.DEFAULT
     */
    size?: GenericSizeEnum;
    /**
     * Handler, called when the dropdown menu is opened.
     */
    onOpen?: () => void;
    /**
     * Handler, called when the dropdown menu is closed.
     */
    onClose?: () => void;
    /**
     * Whether or not the component is in error state.
     *
     * @default false
     */
    hasError?: boolean;
    /**
     * By default the dropdown menu has same width as the dropdown button. Use
     * this to restrain a minimum width. This is taken into consideration only
     * when not in fullscreen mode.
     */
    minMenuWidth?: number;
    /**
     * Whether or not the state should be loading
     */
    loading?: boolean;
};
export declare type DropdownMenuProps = {
    dropdownButtonRef: RefObject<HTMLButtonElement>;
    closePortal: () => void;
    isOpen: boolean;
    menu: DropdownProps['menu'];
    size: GenericSizeEnum;
    minMenuWidth?: number;
};
export declare function useDropdownMenu(isOpen: boolean, dropdownButtonRef: RefObject<HTMLButtonElement>): {
    readonly dropdownContainerTransitions: import("@react-spring/web").TransitionFn<boolean, {
        transform: string;
        opacity: number;
    }>;
    readonly dropdownButtonRect: DOMRect | null;
};
export declare function useDropdown(onClose?: () => void, onOpen?: () => void): {
    readonly isOpen: boolean;
    readonly closePortal: () => void;
    readonly togglePortal: () => void;
    readonly dropdownButtonRef: RefObject<HTMLButtonElement>;
    readonly addRipple: (event: import("react").MouseEvent<HTMLElement, any>) => void;
    readonly ripples: JSX.Element[];
};
