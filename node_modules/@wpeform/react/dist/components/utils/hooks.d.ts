/// <reference types="react" />
/**
 * A hook to determine if a component is mounted. This is useful when changing
 * state in async callbacks. If we try to set state when the component is no
 * longer mounted, react will handle it, but will show an error and would mean
 * there's a memory leak.
 *
 * Use this hook to prevent such cases.
 */
export declare function useIsMounted(): import("react").MutableRefObject<boolean>;
/**
 * A unique Id generator to be used with Question blocks. This makes sure
 * the Id is unique.
 */
export declare function useQuestionId(): string;
/**
 * A hook to hold on to the previous value after changes. Useful for spring
 * utility functions.
 *
 * @param value The value to keep previous of.
 */
export declare function usePrevious<T>(value: T): T | undefined;
/**
 * A hook for timer countdown stuff.
 *
 * @param time The time in seconds until the timeout reaches.
 * @param onDone Callback after timeout.
 */
export declare function useTimerCountDown(time: number, onDone?: () => void): number;
