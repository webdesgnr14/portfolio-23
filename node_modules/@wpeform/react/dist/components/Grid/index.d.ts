import React from 'react';
import { DefaultTheme } from 'styled-components';
import { WidthPresetsEnum } from "../../apollo/generated/types/graphql-global-types";
export declare const CONTROLCLASS = "wpeform-component-grid";
export declare type GridProps = {
    /**
     * Children of Grid. Ideally should be `Grid.Item`.
     */
    children: React.ReactNode;
    /**
     * Additional className.
     */
    className?: string;
    /**
     * Whether or not to give padding to the top-level Grid container.
     *
     * @default false
     */
    noPadding?: boolean;
};
/**
 * A Grid component for layout. Use it with conjunction with `Grid.Item` and
 * pass widths and initialWidths to `Grid.Item`. Make sure to put Grid inside
 * a `ResponsiveContainer` component, else the responsiveness will not work.
 *
 * #### `Grid.Item`
 *
 * Compose Grid with this component for responsiveness. It accepts the following
 * props.
 *
 * ```ts
 * type Width {
 * 	containerMinWidth: number;
 * 	elementWidth: string;
 * }
 * ```
 *
 * | Prop name | Type | Default | Description |
 * | --------- | ---- | ------- | ----------- |
 * | **basicWidth** | `string` | 100% | Basic Width of the GridItem. |
 * | **widths** | `Width[]` | Required | Widths configuration of the Grid Item. This is same as Appearance config of EForm elements. |
 * | **children** | `ReactNode` | Required | Children of Grid Item. |
 * | **className** | `string | undefined` |  | Additional className. |
 *
 * **Example Usage**
 *
 * <Grid>
 * 	<Grid.Item>
 * 		<Grid.Gutter>
 * 			<SomeComponent />
 * 		</Grid.Gutter>
 * 	</Grid.Item>
 * 	<Grid.Item>
 * 		<Grid.Gutter>
 * 			<SomeComponent />
 * 		</Grid.Gutter>
 * 	</Grid.Item>
 * 	<Grid.Item>
 * 		<Grid.Gutter>
 * 			<SomeComponent />
 * 		</Grid.Gutter>
 * 	</Grid.Item>
 * 	<Grid.Item>
 * 		<Grid.Gutter>
 * 			<SomeComponent />
 * 		</Grid.Gutter>
 * 	</Grid.Item>
 * </Grid>
 */
declare function Grid(props: GridProps): JSX.Element;
declare namespace Grid {
    var Item: React.ForwardRefExoticComponent<GridItemProps & React.RefAttributes<HTMLDivElement>>;
    var Gutter: import("styled-components").StyledComponent<"div", DefaultTheme, {
        dense?: boolean | undefined;
    }, never>;
    var NegateGutter: import("styled-components").StyledComponent<"div", DefaultTheme, {
        vertical?: boolean | undefined;
    }, never>;
    var Bottom: import("styled-components").StyledComponent<"div", DefaultTheme, {}, never>;
    var NegateVerticalGutter: import("styled-components").StyledComponent<"div", DefaultTheme, {}, never>;
}
export default Grid;
export declare const GRIDITEMCONTROLCLASS: string;
export declare type GridItemProps = {
    /**
     * Children of Grid. Ideally should be `Grid.Item`.
     */
    children: React.ReactNode;
    /**
     * Additional className.
     */
    className?: string;
    /**
     * Column size.
     *
     * @default FULL
     */
    columnSize?: WidthPresetsEnum;
    /**
     * Basic Width of the GridItem.
     *
     * @default 100%
     */
    basicWidth?: string;
    /**
     * Widths configuration of the Grid Item. This is same as Appearance config
     * of EForm elements.
     *
     * @default []
     */
    widths?: {
        /**
         * Minimum width of the container for this config to happen.
         */
        containerMinWidth: number;
        /**
         * If matches, set element width to.
         */
        elementWidth: string;
    }[];
    /**
     * Tab index to make it focusable.
     */
    tabIndex?: number;
};
