/// <reference types="react" />
import * as qs from 'query-string';
export declare type DataTableStateFilterType = Record<string, string | number | null>;
export declare type DataTableStateType<FILTERS extends DataTableStateFilterType = {}> = {
    selectedRows: string[];
    currentView: string;
    orderBy: string;
    orderDir: 'ascend' | 'descend';
    search: string;
    currentPage: number;
    itemsPerPage: number;
    filters: FILTERS;
    lastClickedItemId: string | null;
    previewItemId: string | null;
    canTrailItems: boolean;
    displayMode: 'table' | 'preview';
};
export declare type UseDataTableProps<FILTERS extends DataTableStateFilterType> = {
    initialFilters: FILTERS;
    initialView: DataTableStateType<FILTERS>['currentView'];
    initialOrderBy: DataTableStateType<FILTERS>['orderBy'];
    initialOrderDir: DataTableStateType<FILTERS>['orderDir'];
    /**
     * Initial display mode between preview and table.
     *
     * @default preview
     */
    initialDisplayMode?: DataTableStateType<FILTERS>['displayMode'];
};
declare type TableActionSetCurrentPage = {
    type: 'SET_CURRENT_PAGE';
    payload: Pick<DataTableStateType, 'currentPage'>;
};
declare type TableActionSetItemsPerPage = {
    type: 'SET_ITEMS_PER_PAGE';
    payload: Pick<DataTableStateType, 'itemsPerPage'>;
};
declare type TableActionSetView<FILTERS extends DataTableStateFilterType> = {
    type: 'SET_VIEW';
    payload: Pick<DataTableStateType<FILTERS>, 'currentView' | 'filters'>;
};
declare type TableActionSetLastClickedItemId = {
    type: 'SET_LAST_CLICKED_ITEM_ID';
    payload: Pick<DataTableStateType, 'lastClickedItemId'>;
};
declare type TableActionSetPreviewItemId = {
    type: 'SET_PREVIEW_ITEM_ID';
    payload: Pick<DataTableStateType, 'previewItemId'>;
};
declare type TableActionSetOrderBy = {
    type: 'SET_ORDERBY';
    payload: Pick<DataTableStateType, 'orderBy'>;
};
declare type TableActionSetOrderDir = {
    type: 'SET_ORDERDIR';
    payload: Pick<DataTableStateType, 'orderDir'>;
};
declare type TableActionSetSearch = {
    type: 'SET_SEARCH';
    payload: Pick<DataTableStateType, 'search'>;
};
declare type TableActionSetSelectedRows = {
    type: 'SET_SELECTED_ROWS';
    payload: Partial<Pick<DataTableStateType, 'selectedRows' | 'lastClickedItemId'>>;
};
declare type TableActionSetFilter<FILTERS extends DataTableStateFilterType> = {
    type: 'SET_FILTERS';
    payload: Pick<DataTableStateType<FILTERS>, 'filters'>;
};
declare type TableActionSetCanTrailItems = {
    type: 'SET_CAN_TRAIL_ITEMS';
    payload: Pick<DataTableStateType, 'canTrailItems'>;
};
declare type TableActionSetDisplayMode = {
    type: 'SET_DISPLAY_MODE';
    payload: Pick<DataTableStateType, 'displayMode'>;
};
declare type TableActionSetFullState<FILTERS extends DataTableStateFilterType> = {
    type: 'SET_STATE';
    payload: DataTableStateType<FILTERS>;
};
export declare type TableStateActions<FILTERS extends DataTableStateFilterType> = TableActionSetCurrentPage | TableActionSetItemsPerPage | TableActionSetLastClickedItemId | TableActionSetPreviewItemId | TableActionSetView<FILTERS> | TableActionSetOrderBy | TableActionSetOrderDir | TableActionSetSearch | TableActionSetSelectedRows | TableActionSetCanTrailItems | TableActionSetFilter<FILTERS> | TableActionSetDisplayMode | TableActionSetFullState<FILTERS>;
export declare function tableStateReducer<FILTERS extends DataTableStateFilterType>(state: DataTableStateType<FILTERS>, action: TableStateActions<FILTERS>): DataTableStateType<FILTERS>;
export declare type UseDataTableReturnTouple<FILTERS extends DataTableStateFilterType> = readonly [
    DataTableStateType<FILTERS>,
    React.Dispatch<TableStateActions<FILTERS>>
];
export declare function useDataTable<FILTERS extends DataTableStateFilterType = {}>(filters: FILTERS, orderBy: string): readonly [DataTableStateType<DataTableStateFilterType>, import("react").Dispatch<TableStateActions<DataTableStateFilterType>>];
export declare function useGenericDataTable<FILTERS extends DataTableStateFilterType = {}, InitializerArgumentsType extends Record<string, any> = {}>(tableStateInitializer: (args: InitializerArgumentsType) => DataTableStateType<FILTERS>, initialArguments: InitializerArgumentsType): UseDataTableReturnTouple<FILTERS>;
export declare function overrideStateFromParsedQueryParams<FILTERS extends DataTableStateFilterType>(urlObj: qs.ParsedQuery<string>, state: DataTableStateType<FILTERS>): void;
export declare function getInitialState<FILTERS extends DataTableStateFilterType>(init: UseDataTableProps<FILTERS>): DataTableStateType<FILTERS>;
export declare function getCurrentQueryState<FILTERS extends DataTableStateFilterType = {}>(state: DataTableStateType<FILTERS>): Record<string, string | number | null>;
export declare function useDataTableWithFiltersInQueryParams<FILTERS extends DataTableStateFilterType = {}>(init: UseDataTableProps<FILTERS>): UseDataTableReturnTouple<FILTERS>;
export declare const dataTableDispatchContext: import("react").Context<import("react").Dispatch<TableStateActions<any>>>;
export declare function useDataTableDispatch<FILTERS extends DataTableStateFilterType = {}>(): import("react").Dispatch<TableStateActions<FILTERS>>;
export declare function compareFilter<FILTER extends Record<string, any>>(filter: FILTER, defaults: FILTER): boolean;
export {};
