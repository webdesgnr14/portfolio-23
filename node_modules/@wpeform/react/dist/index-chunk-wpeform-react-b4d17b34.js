import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { A as ThemedContainer, I as AppErrorBoundary, J as Exception, _ as __, K as Button, l as GenericSizeEnum } from './index-chunk-wpeform-react-daf2eca0.js';

function FallbackContainer(props) {
    const { children, themeStyle, widthOverride, containerLayoutOverride, mode = 'live', ssr = false, } = props;
    return (jsx(ThemedContainer, Object.assign({ themeStyle: themeStyle, mode: mode, containerLayoutOverride: containerLayoutOverride, widthOverride: widthOverride, ssr: ssr }, { children: children }), void 0));
}

function FallbackNetworkError(props) {
    const { lastError, resetError, themeStyle } = props;
    return (jsx(FallbackContainer, Object.assign({ themeStyle: themeStyle }, { children: jsx(Exception, { type: "client", title: __('Something went wrong', 'wp-eform'), description: jsxs(Fragment, { children: [jsx("p", { children: __('There was an error in the application. Reloading the page might fix it.', 'wp-eform') }, void 0), lastError && lastError.toString ? (jsxs(Fragment, { children: [jsx("p", { children: __('More information on the error can be found below.', 'wp-eform') }, void 0), jsx("p", { children: lastError.toString() }, void 0)] }, void 0)) : null] }, void 0), footer: jsxs(Fragment, { children: [jsx(Button, Object.assign({ onClick: () => {
                            window.location.reload();
                        }, style: "3d", size: GenericSizeEnum.SMALL }, { children: __('RELOAD PAGE', 'wp-eform') }), void 0), jsx(Button, Object.assign({ onClick: () => {
                            resetError();
                        }, style: "3d", size: GenericSizeEnum.SMALL, colorful: false }, { children: __('RETRY WITHOUT RELOAD', 'wp-eform') }), void 0)] }, void 0) }, void 0) }), void 0));
}
function FrontEndErrorBoundary(props) {
    const { children, themeStyle } = props;
    const fallback = (resetError, lastError) => (jsx(FallbackNetworkError, { resetError: resetError, lastError: lastError, themeStyle: themeStyle }, void 0));
    return jsx(AppErrorBoundary, Object.assign({ fallback: fallback }, { children: children }), void 0);
}

export { FallbackContainer as F, FrontEndErrorBoundary as a };
