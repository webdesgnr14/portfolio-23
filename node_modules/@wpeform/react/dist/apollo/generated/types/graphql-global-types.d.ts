/**
 * Button icon position.
 */
export declare enum ButtonIconPositionEnum {
    AFTER = "AFTER",
    BEFORE = "BEFORE"
}
/**
 * Button open type.
 */
export declare enum ButtonOpenTypeEnum {
    BLANK = "BLANK",
    POPUP = "POPUP",
    SELF = "SELF"
}
/**
 * Possible action in conditional logic consequence.
 */
export declare enum ConsequenceActionEnum {
    HIDE_FIELDS = "HIDE_FIELDS",
    HIDE_PAGES = "HIDE_PAGES",
    SET_VALUE_OF = "SET_VALUE_OF",
    SHOW_FIELDS = "SHOW_FIELDS",
    SHOW_PAGES = "SHOW_PAGES"
}
/**
 * Dark theme mode.
 */
export declare enum DarkThemeModeEnum {
    ALWAYS = "ALWAYS",
    AUTO = "AUTO",
    OFF = "OFF"
}
/**
 * Possible comparison in conditional logic.
 */
export declare enum EventComparisonEnum {
    CONTAINS = "CONTAINS",
    ENDS_WITH = "ENDS_WITH",
    EQUALS_TO = "EQUALS_TO",
    GREATER_THAN = "GREATER_THAN",
    LESS_THAN = "LESS_THAN",
    STARTS_WITH = "STARTS_WITH"
}
/**
 * Possible comparison in conditional logic.
 */
export declare enum EventHasEnum {
    LENGTH = "LENGTH",
    VALUE = "VALUE"
}
/**
 * Event operation.
 */
export declare enum EventOperationEnum {
    IS = "IS",
    ISNOT = "ISNOT"
}
/**
 * Relation logic with the next event in the logic chain.
 */
export declare enum EventRelationEnum {
    AND = "AND",
    OR = "OR"
}
/**
 * Form element category.
 */
export declare enum FormElementCategoryEnum {
    CHOICE = "CHOICE",
    DESIGN = "DESIGN",
    INPUT = "INPUT",
    SECURITY = "SECURITY"
}
/**
 * Pagination restriction type of a form.
 */
export declare enum FormPaginationRestrictionEnum {
    NEXT_ON_ALL_VALID = "NEXT_ON_ALL_VALID",
    NONE = "NONE",
    ONLY_WHEN_ALL_VALID = "ONLY_WHEN_ALL_VALID"
}
/**
 * Form payment type.
 */
export declare enum FormPaymentTypeEnum {
    ONETIME = "ONETIME",
    SUBSCRIPTION = "SUBSCRIPTION"
}
/**
 * Form payments coupon type.
 */
export declare enum FormPaymentsCouponTypeEnum {
    PERCENTAGE = "PERCENTAGE",
    VALUE = "VALUE"
}
/**
 * Form settings background scroll.
 */
export declare enum FormSettingsBackgroundAttachmentEnum {
    FIXED = "FIXED",
    LOCAL = "LOCAL",
    SCROLL = "SCROLL"
}
/**
 * Form settings background origin.
 */
export declare enum FormSettingsBackgroundOriginAndClipEnum {
    BORDER_BOX = "BORDER_BOX",
    CONTENT_BOX = "CONTENT_BOX",
    PADDING_BOX = "PADDING_BOX"
}
/**
 * Form settings background repeat.
 */
export declare enum FormSettingsBackgroundRepeatEnum {
    REPEAT_BOTH = "REPEAT_BOTH",
    REPEAT_NONE = "REPEAT_NONE",
    REPEAT_X = "REPEAT_X",
    REPEAT_Y = "REPEAT_Y"
}
/**
 * Form settings limit on login values.
 */
export declare enum FormSettingsLimitOnLoginEnum {
    LOGGED_IN = "LOGGED_IN",
    LOGGED_OUT = "LOGGED_OUT",
    NONE = "NONE"
}
/**
 * Alignment.
 */
export declare enum GenericAlignmentEnum {
    CENTER = "CENTER",
    JUSTIFY = "JUSTIFY",
    LEFT = "LEFT",
    RIGHT = "RIGHT"
}
/**
 * Generic size.
 */
export declare enum GenericSizeEnum {
    DEFAULT = "DEFAULT",
    LARGE = "LARGE",
    SMALL = "SMALL"
}
/**
 * Heading size.
 */
export declare enum HeadingSizeEnum {
    SIZE1 = "SIZE1",
    SIZE2 = "SIZE2",
    SIZE3 = "SIZE3",
    SIZE4 = "SIZE4",
    SIZE5 = "SIZE5",
    SIZE6 = "SIZE6"
}
/**
 * Heading tag.
 */
export declare enum HeadingTagEnum {
    H1 = "H1",
    H2 = "H2",
    H3 = "H3",
    H4 = "H4",
    H5 = "H5",
    H6 = "H6",
    P = "P"
}
/**
 * Mask type.
 */
export declare enum MaskTypeEnum {
    NONE = "NONE",
    PRESET = "PRESET",
    REGEXP = "REGEXP",
    STRING = "STRING"
}
/**
 * Number comparison.
 */
export declare enum NumberComparisonEnum {
    EQUALS_TO = "EQUALS_TO",
    GREATER_THAN = "GREATER_THAN",
    LESS_THAN = "LESS_THAN"
}
/**
 * Possible columns for Option type elements.
 */
export declare enum OptionColumnEnum {
    AUTO = "AUTO",
    FOUR = "FOUR",
    ONE = "ONE",
    THREE = "THREE",
    TWO = "TWO"
}
/**
 * Pagination type for a collection.
 */
export declare enum PaginationTypeEnum {
    CURSOR = "CURSOR",
    OFFSET = "OFFSET"
}
/**
 * Automatic prefil type of an EForm element.
 */
export declare enum PrefilEnum {
    META = "META",
    NONE = "NONE",
    URL = "URL"
}
/**
 * Redirect type.
 */
export declare enum RedirectTypeEnum {
    CONDITIONAL = "CONDITIONAL",
    FLAT = "FLAT",
    NONE = "NONE",
    PORTAL = "PORTAL",
    SCOREPERCENTAGE = "SCOREPERCENTAGE",
    SCORETOTAL = "SCORETOTAL",
    SUBMISSION = "SUBMISSION"
}
/**
 * Resource view mode. Mainly used to list forms and submissions filters under these modes.
 */
export declare enum ResourceViewModeEnum {
    ALL = "ALL",
    OWNED = "OWNED",
    SHARED = "SHARED",
    TRASHED = "TRASHED"
}
/**
 * Score from to type.
 */
export declare enum ScoreFromToTypeEnum {
    PERCENTAGE = "PERCENTAGE",
    VALUE = "VALUE"
}
/**
 * Score operation.
 */
export declare enum ScoreOperationEnum {
    ADD = "ADD",
    SUBTRACT = "SUBTRACT"
}
/**
 * Select type.
 */
export declare enum SelectTypeEnum {
    MULTIPLE = "MULTIPLE",
    SINGLE = "SINGLE"
}
/**
 * Settings appearance layout.
 */
export declare enum SettingsAppearanceContainerLayoutEnum {
    FIXED = "FIXED",
    FLUID = "FLUID"
}
/**
 * Settings appearance control alignment.
 */
export declare enum SettingsAppearanceControlAlignmentEnum {
    CENTER = "CENTER",
    LEFT = "LEFT",
    RIGHT = "RIGHT"
}
/**
 * Settings appearance control layout.
 */
export declare enum SettingsAppearanceControlLayoutEnum {
    HORIZONTAL = "HORIZONTAL",
    INLINE = "INLINE",
    VERTICAL = "VERTICAL"
}
/**
 * Settings appearance control types.
 */
export declare enum SettingsAppearanceControlTypeEnum {
    BOXY = "BOXY",
    MATERIAL = "MATERIAL"
}
/**
 * Settings appearance progress bar position.
 */
export declare enum SettingsAppearanceProgressBarPositionEnum {
    BOTTOM = "BOTTOM",
    TOP = "TOP"
}
/**
 * Submission stat interval.
 */
export declare enum SubmissionStatIntervalEnum {
    DAY = "DAY",
    MONTH = "MONTH",
    WEEK = "WEEK"
}
/**
 * Submit timer.
 */
export declare enum SubmitTimerEnum {
    NONE = "NONE",
    OVERALL = "OVERALL",
    PAGE_SPECIFIC = "PAGE_SPECIFIC"
}
/**
 * Possible comparison in conditional logic.
 */
export declare enum TrashEnum {
    NOT_TRASHED = "NOT_TRASHED",
    TRASHED = "TRASHED"
}
/**
 * Validation filter type.
 */
export declare enum ValidationFilterTypeEnum {
    ALL = "ALL",
    EMAIL = "EMAIL",
    INTEGER = "INTEGER",
    NOLETTER = "NOLETTER",
    NONUMBER = "NONUMBER",
    NUMBER = "NUMBER",
    PHONE = "PHONE",
    URL = "URL"
}
/**
 * Width presets.
 */
export declare enum WidthPresetsEnum {
    FULL = "FULL",
    HALF = "HALF",
    MANUAL = "MANUAL",
    ONEFOURTH = "ONEFOURTH",
    ONETHIRD = "ONETHIRD",
    THREEFOURTH = "THREEFOURTH",
    TWOTHIRD = "TWOTHIRD"
}
export interface CategoryFilterInput {
    search?: string | null;
    trashed?: TrashEnum | null;
}
export interface CategoryInput {
    title: string;
    description: string;
}
export interface ConditionalConsequenceInput {
    id: string;
    action: ConsequenceActionEnum;
    fieldsToShow?: string[] | null;
    fieldsToHide?: string[] | null;
    pagesToShow?: string[] | null;
    pagesToHide?: string[] | null;
    fieldToSet?: string | null;
    value?: string | null;
}
export interface ConditionalEventInput {
    id: string;
    fieldid: string;
    has: EventHasEnum;
    operation: EventOperationEnum;
    operator: EventComparisonEnum;
    value?: string | null;
    relation: EventRelationEnum;
}
export interface ConditionalInput {
    id: string;
    events: ConditionalEventInput[];
    consequences: ConditionalConsequenceInput[];
}
export interface ElementScoreConditionInput {
    id: string;
    condition: EventComparisonEnum;
    operation: EventOperationEnum;
    compareWith: string;
    scoreId: string;
    scoreOperation: ScoreOperationEnum;
    scoreValue: number;
}
export interface FormElementAddressConfigInput {
    interface?: FormElementAddressConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    validation?: FormElementAddressConfigValidationInput | null;
}
export interface FormElementAddressConfigInterfaceInput {
    disableIcons: boolean;
    fieldOne: boolean;
    fieldOnePlaceholder: string;
    fieldTwo: boolean;
    fieldTwoPlaceholder: string;
    showCountry: boolean;
    countryPlaceholder: string;
    restrictCountries: string[];
    showState: boolean;
    statePlaceholder: string;
    showCity: boolean;
    cityPlaceholder: string;
    showZip: boolean;
    zipPlaceholder: string;
}
export interface FormElementAddressConfigValidationInput {
    required: boolean;
}
export interface FormElementAddressSubmissionElementValueInput {
    fieldOne: string;
    fieldTwo: string;
    city: string;
    country: string;
    state: string;
    zip: string;
}
export interface FormElementAppearanceInput {
    title?: string | null;
    description?: string | null;
    subtitle?: string | null;
    overrideControlAppearance: boolean;
    controlType: SettingsAppearanceControlTypeEnum;
    controlAlignment: SettingsAppearanceControlAlignmentEnum;
    controlLayout: SettingsAppearanceControlLayoutEnum;
    hint?: string | null;
    hintIcon?: string | null;
    hintLabel?: string | null;
    answerDescription?: string | null;
    columnSize: WidthPresetsEnum;
    basicWidth: string;
    widths: FormElementAppearanceWidthInput[];
    initiallyHidden: boolean;
    className: string;
}
export interface FormElementAppearanceWidthInput {
    id: string;
    containerMinWidth: number;
    elementWidth: string;
}
export interface FormElementButtonsConfigAttributesInput {
    open: ButtonOpenTypeEnum;
    popupHeight: number;
    popupWidth: number;
}
export interface FormElementButtonsConfigInput {
    interface?: FormElementButtonsConfigInterfaceInput | null;
    attributes?: FormElementButtonsConfigAttributesInput | null;
    buttons: FormElementConfigButtonInput[];
}
export interface FormElementButtonsConfigInterfaceInput {
    alignment: GenericAlignmentEnum;
    size: GenericSizeEnum;
    style: string;
    rounded: boolean;
    colored: boolean;
}
export interface FormElementCaptchaSubmissionElementValueInput {
    solved: string;
    encrypted: string;
}
export interface FormElementCheckboxConfigInput {
    interface?: FormElementCheckboxConfigInterfaceInput | null;
    score: FormElementConfigScoreInput;
    attributes: FormElementConfigAttributesInput;
    validation?: FormElementCheckboxConfigValidationInput | null;
}
export interface FormElementCheckboxConfigInterfaceInput {
    icon: string;
    columns: OptionColumnEnum;
    options: FormElementConfigMcqOptionInput[];
    others: boolean;
    othersId: string;
    othersPlaceholder: string;
    shuffle: boolean;
}
export interface FormElementCheckboxConfigValidationInput {
    required: boolean;
    filters: FormElementConfigFiltersInput;
}
export interface FormElementCheckboxSubmissionElementValueInput {
    selected: string[];
    other?: string | null;
}
export interface FormElementConfigAttributesInput {
    prefilType: PrefilEnum;
    prefilParameter: string;
    readonly: boolean;
    defaultValue: string;
}
export interface FormElementConfigButtonInput {
    id: string;
    icon: string;
    iconPosition: ButtonIconPositionEnum;
    label: string;
    link: string;
}
export interface FormElementConfigFiltersInput {
    type?: ValidationFilterTypeEnum | null;
    minNum?: number | null;
    maxNum?: number | null;
    minString?: number | null;
    maxString?: number | null;
    minItems?: number | null;
    maxItems?: number | null;
}
export interface FormElementConfigInput {
    heading?: FormElementHeadingConfigInput | null;
    buttons?: FormElementButtonsConfigInput | null;
    radio?: FormElementRadioConfigInput | null;
    checkbox?: FormElementCheckboxConfigInput | null;
    dropdown?: FormElementDropdownConfigInput | null;
    singlecheckbox?: FormElementSinglecheckboxConfigInput | null;
    toggle?: FormElementToggleConfigInput | null;
    slider?: FormElementSliderConfigInput | null;
    range?: FormElementRangeConfigInput | null;
    rating?: FormElementRatingConfigInput | null;
    matrixchoice?: FormElementMatrixchoiceConfigInput | null;
    sortable?: FormElementSortableConfigInput | null;
    text?: FormElementTextConfigInput | null;
    textarea?: FormElementTextareaConfigInput | null;
    address?: FormElementAddressConfigInput | null;
    mathcalc?: FormElementMathcalcConfigInput | null;
    datetimeinput?: FormElementDatetimeinputConfigInput | null;
    matrixinput?: FormElementMatrixinputConfigInput | null;
}
export interface FormElementConfigMaskRegExpInput {
    id: string;
    pattern: string;
    caseSensitive: boolean;
}
export interface FormElementConfigMasksInput {
    maskType?: MaskTypeEnum | null;
    maskPreset?: string | null;
    maskString?: string | null;
    placeholder: string;
    alwaysShowMask: boolean;
    maskRegExps: FormElementConfigMaskRegExpInput[];
}
export interface FormElementConfigMcqOptionInput {
    id: string;
    label: string;
    answerDescription?: string | null;
    num?: number | null;
}
export interface FormElementConfigScoreInput {
    scoreConditions: ElementScoreConditionInput[];
}
export interface FormElementConfigSliderMarkInput {
    markId: string;
    index: number;
    label?: string | null;
}
export interface FormElementDatetimeinputConfigInput {
    interface?: FormElementDatetimeinputConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    score: FormElementConfigScoreInput;
    validation?: FormElementDatetimeinputConfigValidationInput | null;
}
export interface FormElementDatetimeinputConfigInterfaceInput {
    icon: string;
    type: string;
    format: string;
    timeType: string;
    dateTimeSeparator: string;
    showInputLabels: boolean;
    hideSeconds: boolean;
}
export interface FormElementDatetimeinputConfigValidationInput {
    required: boolean;
    minValue: string;
    maxValue: string;
}
export interface FormElementDatetimeinputSubmissionElementValueInput {
    input: string;
}
export interface FormElementDropdownConfigInput {
    interface?: FormElementDropdownConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    score: FormElementConfigScoreInput;
    validation?: FormElementDropdownConfigValidationInput | null;
}
export interface FormElementDropdownConfigInterfaceInput {
    icon: string;
    placeholder: string;
    showSearch: boolean;
    searchPlaceholder: string;
    emptySearchResultNotice: string;
    options: FormElementConfigMcqOptionInput[];
    others: boolean;
    othersId: string;
    othersPlaceholder: string;
    shuffle: boolean;
}
export interface FormElementDropdownConfigValidationInput {
    required: boolean;
    selectType: SelectTypeEnum;
    filters: FormElementConfigFiltersInput;
}
export interface FormElementDropdownSubmissionElementValueInput {
    selected: string[];
    other?: string | null;
}
export interface FormElementHeadingConfigInput {
    interface?: FormElementHeadingConfigInterfaceInput | null;
}
export interface FormElementHeadingConfigInterfaceInput {
    icon: string;
    size: HeadingSizeEnum;
    tag: HeadingTagEnum;
    showTop: boolean;
    divider: boolean;
}
export interface FormElementInput {
    id: string;
    type: string;
    appearance?: FormElementAppearanceInput | null;
    config: FormElementConfigInput;
    children: string[];
}
export interface FormElementMathcalcConfigInput {
    interface?: FormElementMathcalcConfigInterfaceInput | null;
}
export interface FormElementMathcalcConfigInterfaceInput {
    type: string;
    formula: string;
    precision: number;
    decimalSeparator: string;
    thousandsSeparator: string;
    prefix: string;
    suffix: string;
}
export interface FormElementMathcalcSubmissionElementValueInput {
    output: number;
}
export interface FormElementMatrixRowColumnInput {
    itemId: string;
    label: string;
    num?: number | null;
    width?: string | null;
}
export interface FormElementMatrixchoiceConfigInput {
    interface?: FormElementMatrixchoiceConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    score: FormElementConfigScoreInput;
    validation?: FormElementMatrixchoiceConfigValidationInput | null;
}
export interface FormElementMatrixchoiceConfigInterfaceInput {
    icon: string;
    multiple: boolean;
    rows: FormElementMatrixRowColumnInput[];
    columns: FormElementMatrixRowColumnInput[];
    rowHeadingWidth: string;
    tableType: string;
}
export interface FormElementMatrixchoiceConfigValidationInput {
    required: boolean;
}
export interface FormElementMatrixchoiceSubmissionElementValueInput {
    selected: FormSubmissionMatrixChoiceSelectedInput[];
}
export interface FormElementMatrixinputConfigInput {
    interface?: FormElementMatrixinputConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    score: FormElementConfigScoreInput;
    validation?: FormElementMatrixinputConfigValidationInput | null;
}
export interface FormElementMatrixinputConfigInterfaceInput {
    icon: string;
    multiline: boolean;
    rows: FormElementMatrixRowColumnInput[];
    columns: FormElementMatrixRowColumnInput[];
    rowHeadingWidth: string;
    tableType: string;
}
export interface FormElementMatrixinputConfigValidationInput {
    required: boolean;
}
export interface FormElementMatrixinputSubmissionElementValueInput {
    input: FormSubmissionMatrixInputValueInput[];
}
export interface FormElementRadioConfigInput {
    interface?: FormElementRadioConfigInterfaceInput | null;
    score: FormElementConfigScoreInput;
    attributes: FormElementConfigAttributesInput;
    validation?: FormElementRadioConfigValidationInput | null;
}
export interface FormElementRadioConfigInterfaceInput {
    icon: string;
    columns: OptionColumnEnum;
    options: FormElementConfigMcqOptionInput[];
    others: boolean;
    othersId: string;
    othersPlaceholder: string;
    shuffle: boolean;
}
export interface FormElementRadioConfigValidationInput {
    required: boolean;
}
export interface FormElementRadioSubmissionElementValueInput {
    selected?: string | null;
    other?: string | null;
}
export interface FormElementRangeConfigInput {
    interface?: FormElementRangeConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    score: FormElementConfigScoreInput;
}
export interface FormElementRangeConfigInterfaceInput {
    min: number;
    max: number;
    step: number;
    precision: number;
    showMarks: boolean;
    customMarks: FormElementConfigSliderMarkInput[];
    showFreeInput: boolean;
    separator: string;
}
export interface FormElementRangeSubmissionElementValueInput {
    minSelected: number;
    maxSelected: number;
}
export interface FormElementRatingConfigInput {
    interface?: FormElementRatingConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    score: FormElementConfigScoreInput;
    validation?: FormElementRatingConfigValidationInput | null;
}
export interface FormElementRatingConfigInterfaceInput {
    type: string;
    customRatingIcon: string;
    ratingMax: number;
    customItems: FormElementRatingItemInput[];
    showFeedback: boolean;
    feedbackWhen: NumberComparisonEnum;
    compareWith: number;
    feedbackLabel: string;
}
export interface FormElementRatingConfigValidationInput {
    required: boolean;
}
export interface FormElementRatingItemInput {
    itemId: string;
    icon: string;
}
export interface FormElementRatingSubmissionElementValueInput {
    selected: number;
    feedback: string;
}
export interface FormElementSinglecheckboxConfigInput {
    interface?: FormElementSinglecheckboxConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    score: FormElementConfigScoreInput;
    validation?: FormElementSinglecheckboxConfigValidationInput | null;
}
export interface FormElementSinglecheckboxConfigInterfaceInput {
    icon: string;
}
export interface FormElementSinglecheckboxConfigValidationInput {
    required: boolean;
}
export interface FormElementSinglecheckboxSubmissionElementValueInput {
    selected: boolean;
}
export interface FormElementSliderConfigInput {
    interface?: FormElementSliderConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    score: FormElementConfigScoreInput;
}
export interface FormElementSliderConfigInterfaceInput {
    min: number;
    max: number;
    step: number;
    precision: number;
    showMarks: boolean;
    customMarks: FormElementConfigSliderMarkInput[];
    showFreeInput: boolean;
}
export interface FormElementSliderSubmissionElementValueInput {
    selected: number;
}
export interface FormElementSortableConfigInput {
    interface?: FormElementSortableConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    score: FormElementConfigScoreInput;
}
export interface FormElementSortableConfigInterfaceInput {
    lockVertically: boolean;
    items: FormElementSortableItemInput[];
    shuffle: boolean;
}
export interface FormElementSortableItemInput {
    itemId: string;
    label: string;
}
export interface FormElementSortableSubmissionElementValueInput {
    order: string[];
}
export interface FormElementTextConfigInput {
    interface?: FormElementTextConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    score: FormElementConfigScoreInput;
    validation?: FormElementTextConfigValidationInput | null;
}
export interface FormElementTextConfigInterfaceInput {
    icon: string;
    placeholder: string;
}
export interface FormElementTextConfigValidationInput {
    required: boolean;
    filters: FormElementConfigFiltersInput;
    masks: FormElementConfigMasksInput;
}
export interface FormElementTextSubmissionElementValueInput {
    input: string;
}
export interface FormElementTextareaConfigInput {
    interface?: FormElementTextareaConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    score: FormElementConfigScoreInput;
    validation?: FormElementTextareaConfigValidationInput | null;
}
export interface FormElementTextareaConfigInterfaceInput {
    icon: string;
    placeholder: string;
}
export interface FormElementTextareaConfigValidationInput {
    required: boolean;
    filters: FormElementConfigFiltersInput;
}
export interface FormElementTextareaSubmissionElementValueInput {
    input: string;
}
export interface FormElementToggleConfigInput {
    interface?: FormElementToggleConfigInterfaceInput | null;
    attributes: FormElementConfigAttributesInput;
    score: FormElementConfigScoreInput;
    validation?: FormElementToggleConfigValidationInput | null;
}
export interface FormElementToggleConfigInterfaceInput {
    activeIcon: string;
    inactiveIcon: string;
    activeLabel: string;
    inactiveLabel: string;
}
export interface FormElementToggleConfigValidationInput {
    required: boolean;
}
export interface FormElementToggleSubmissionElementValueInput {
    selected: boolean;
}
export interface FormFilterInput {
    search?: string | null;
    category?: string | null;
    owner?: string | null;
    mergeShared?: boolean | null;
    resourceView?: ResourceViewModeEnum | null;
}
export interface FormInput {
    name: string;
    integrations?: FormIntegrationsInput | null;
    payments?: FormPaymentsInput | null;
    permissions?: FormPermissionsInput | null;
    settings?: FormSettingsInput | null;
    styles?: FormStylesInput | null;
    structures: FormStructureInput[];
    elements: FormElementInput[];
    pools: FormPoolInput[];
    conditionals: ConditionalInput[];
    categories: string[];
    editors: string[];
    skeleton?: FormSkeletonInput | null;
}
export interface FormIntegrationsInput {
    mailchimp?: FormIntegrationsMailchimpInput | null;
}
export interface FormIntegrationsMailchimpInput {
    enabled: boolean;
    apiKey: string;
    listIds: string[];
    tags: string;
    doubleOptIn: boolean;
    customData: IntegrationCustomDataInput[];
}
export interface FormPaymentsCouponItemInput {
    id: string;
    code: string;
    type: FormPaymentsCouponTypeEnum;
    value: number;
    min: number;
}
export interface FormPaymentsGeneralInput {
    enabled: boolean;
    type: FormPaymentTypeEnum;
    subscriptionStatement: string;
    selectedGateways: string[];
    defaultGateway: string;
    lockSubmissionOnPendingPayment: boolean;
    lockMessage: string;
    formula: string;
    currency: string;
    zeroDecimal: boolean;
    currencyPrefix: string;
    currencySuffix: string;
    coupons: FormPaymentsCouponItemInput[];
    itemName: string;
    itemDescription: string;
    itemSku: string;
    invoiceNumber: string;
    successSubject: string;
    successMessage: string;
    errorSubject: string;
    errorMessage: string;
    cancelSubject: string;
    cancelMessage: string;
    retrySubjectPrefix: string;
}
export interface FormPaymentsInput {
    general?: FormPaymentsGeneralInput | null;
    offline?: FormPaymentsOfflineInput | null;
}
export interface FormPaymentsOfflineInput {
    label: string;
    instruction: string;
    status?: string | null;
}
export interface FormPermissionsAccessPermissionInput {
    canEdit: boolean;
    editTime: number;
    restrictEditOnExpiration: boolean;
}
export interface FormPermissionsInput {
    accessPermission?: FormPermissionsAccessPermissionInput | null;
    submissionPermission?: FormPermissionsSubmissionPermissionInput | null;
}
export interface FormPermissionsSubmissionPermissionInput {
    limitTotal: number;
    totalLimitMsg: string;
    totalLimitNotice: string;
    limitPerEmail: number;
    emailLimitMsg: string;
    limitPerIp: number;
    ipLimitMsg: string;
    limitPerUser: number;
    userLimitMsg: string;
    limitPerCookie: number;
    cookieLimitMsg: string;
    limitOnLogin: FormSettingsLimitOnLoginEnum;
    loginLimitLoggedInMsg: string;
    loginLimitLoggedOutMsg: string;
    limitOnInterval: number;
    intervalLimitMsg: string;
    startsOn?: string | null;
    startsOnMsg: string;
    expiresOn?: string | null;
    expiresOnMsg: string;
    noticeIfSubmitted: boolean;
    submittedNotice: string;
}
export interface FormPoolInput {
    id: string;
    name: string;
    children: string[];
}
export interface FormScoreConditionalRedirectionItemInput {
    id: string;
    url: string;
    events: ConditionalEventInput[];
}
export interface FormScoreDesignationInput {
    id: string;
    scoreCategory: string;
    fromToType: ScoreFromToTypeEnum;
    from: number;
    to: number;
    name: string;
    description: string;
}
export interface FormScoreItemInput {
    id: string;
    name: string;
    color: string;
    outcomeName: string;
    outcomeDescription: string;
}
export interface FormScorePercentageRedirectionItemInput {
    id: string;
    scoreId?: string | null;
    url: string;
    from: number;
    to: number;
}
export interface FormScoreTotalRedirectionItemInput {
    id: string;
    scoreId?: string | null;
    url: string;
    from: number;
    to: number;
}
export interface FormSettingsAdminNotificationInput {
    toEmail?: string | null;
    subject: string;
    message: string;
    updateSubject: string;
    updateMessage: string;
    fromName: string;
    fromEmail?: string | null;
    header: string;
    replyToUser: boolean;
    showSubmission: boolean;
    footer: string;
}
export interface FormSettingsInput {
    userNotification?: FormSettingsUserNotificationInput | null;
    adminNotification?: FormSettingsAdminNotificationInput | null;
    userData?: FormSettingsUserDataInput | null;
    score?: FormSettingsScoreInput | null;
    timer?: FormSettingsTimerInput | null;
}
export interface FormSettingsScoreInput {
    precision: number;
    scoreLists: FormScoreItemInput[];
    designations: FormScoreDesignationInput[];
}
export interface FormSettingsTimerInput {
    submitTimer: SubmitTimerEnum;
    showTimer: boolean;
    timeLimit?: number | null;
    timerMessage: string;
    recordSubmissionTime: boolean;
    showStopwatch: boolean;
}
export interface FormSettingsUserDataInput {
    fName?: string | null;
    lName?: string | null;
    email?: string | null;
    phone?: string | null;
    storeIp: boolean;
    anonymizeIp: boolean;
    storeUserId: boolean;
}
export interface FormSettingsUserNotificationInput {
    subject: string;
    message: string;
    updateSubject: string;
    updateMessage: string;
    adminUpdateSubject: string;
    adminUpdateMessage: string;
    fromName: string;
    fromEmail?: string | null;
    header: string;
    showSubmission: boolean;
    viewOnline: boolean;
    viewOnlineText: string;
    footer: string;
}
export interface FormSkeletonInput {
    formPreviewSkeleton: string;
    formEditSkeleton: string;
    formSummarySkeleton: string;
}
export interface FormStructureConfigInput {
    title: string;
    subtitle?: string | null;
    icon?: string | null;
    timer?: number | null;
    initiallyHidden: boolean;
}
export interface FormStructureInput {
    id: string;
    config: FormStructureConfigInput;
    children: string[];
}
export interface FormStylesAppearanceInput {
    containerLayout: SettingsAppearanceContainerLayoutEnum;
    maxWidth: string;
    controlType: SettingsAppearanceControlTypeEnum;
    controlAlignment: SettingsAppearanceControlAlignmentEnum;
    controlLayout: SettingsAppearanceControlLayoutEnum;
}
export interface FormStylesCustomBackgroundInput {
    enabled: boolean;
    backgroundImage: string;
    backgroundPosition: string;
    backgroundSize: string;
    backgroundRepeat: FormSettingsBackgroundRepeatEnum;
    backgroundOrigin: FormSettingsBackgroundOriginAndClipEnum;
    backgroundClip: FormSettingsBackgroundOriginAndClipEnum;
    backgroundAttachment: FormSettingsBackgroundAttachmentEnum;
}
export interface FormStylesFormBehaviorInput {
    disabledAutoComplete: boolean;
    subject: string;
    message: string;
    updateSubject: string;
    updateMessage: string;
    errorSubject: string;
    errorRetryButtonLabel: string;
    errorRetryButtonIcon: string;
    errorRetryButtonIconPosition: ButtonIconPositionEnum;
    kioskMode: boolean;
    kioskMessage: string;
    kioskTime: number;
}
export interface FormStylesInput {
    appearance?: FormStylesAppearanceInput | null;
    pagination?: FormStylesPaginationInput | null;
    customBackground?: FormStylesCustomBackgroundInput | null;
    theme?: FormStylesThemeInput | null;
    typography?: FormStylesTypographyInput | null;
    formBehavior?: FormStylesFormBehaviorInput | null;
    redirection?: FormStylesRedirectionInput | null;
    tracking?: FormStylesTrackingInput | null;
}
export interface FormStylesPaginationInput {
    showTabs: boolean;
    showProgressBar: boolean;
    progressDecimalPoint: number;
    progressBarPosition: SettingsAppearanceProgressBarPositionEnum;
    showProgressLabel: boolean;
    autoProgress: boolean;
    autoProgressDelay: number;
    autoSubmit: boolean;
    autoScroll: boolean;
    scrollOffset: number;
    blockPreviousNavigation: boolean;
    paginationRestriction: FormPaginationRestrictionEnum;
    panelEnabled: boolean;
    alignment: GenericAlignmentEnum;
    size: GenericSizeEnum;
    style: string;
    rounded: boolean;
    colored: boolean;
    barlike: boolean;
    nextLabel: string;
    nextIcon: string;
    nextIconPosition: ButtonIconPositionEnum;
    prevLabel: string;
    prevIcon: string;
    prevIconPosition: ButtonIconPositionEnum;
    submitLabel: string;
    submitIcon: string;
    submitIconPosition: ButtonIconPositionEnum;
    updateLabel: string;
    updateIcon: string;
    updateIconPosition: ButtonIconPositionEnum;
    showResetButton: boolean;
    resetLabel: string;
    resetMessage: string;
    resetIcon: string;
    resetIconPosition: ButtonIconPositionEnum;
    hideWhenNotRelevant: boolean;
}
export interface FormStylesRedirectionInput {
    type: RedirectTypeEnum;
    url: string;
    delay: number;
    message: string;
    iframeRedirect: boolean;
    scoreTotalLogic: FormScoreTotalRedirectionItemInput[];
    scorePercentageLogic: FormScorePercentageRedirectionItemInput[];
    conditionalLogic: FormScoreConditionalRedirectionItemInput[];
}
export interface FormStylesThemeInput {
    scheme: string;
    darkMode: DarkThemeModeEnum;
    customColorPrimary?: string | null;
    customColorSecondary?: string | null;
    customColorBg?: string | null;
    customColorText?: string | null;
    css: string;
}
export interface FormStylesTrackingInput {
    urlTracking: boolean;
    urlTrackId: string;
}
export interface FormStylesTypographyInput {
    baseFont: number;
    bodyFamily: string;
    bodyFamilyCustom: string;
    headFamily: string;
    headFamilyCustom: string;
    headFontBold: boolean;
    headFontItalic: boolean;
}
export interface FormSubmissionElementInput {
    id: string;
    value: FormSubmissionElementValueInput;
    conditionallyHidden: boolean;
}
export interface FormSubmissionElementValueInput {
    radio?: FormElementRadioSubmissionElementValueInput | null;
    checkbox?: FormElementCheckboxSubmissionElementValueInput | null;
    dropdown?: FormElementDropdownSubmissionElementValueInput | null;
    singlecheckbox?: FormElementSinglecheckboxSubmissionElementValueInput | null;
    toggle?: FormElementToggleSubmissionElementValueInput | null;
    slider?: FormElementSliderSubmissionElementValueInput | null;
    range?: FormElementRangeSubmissionElementValueInput | null;
    rating?: FormElementRatingSubmissionElementValueInput | null;
    matrixchoice?: FormElementMatrixchoiceSubmissionElementValueInput | null;
    sortable?: FormElementSortableSubmissionElementValueInput | null;
    text?: FormElementTextSubmissionElementValueInput | null;
    textarea?: FormElementTextareaSubmissionElementValueInput | null;
    address?: FormElementAddressSubmissionElementValueInput | null;
    mathcalc?: FormElementMathcalcSubmissionElementValueInput | null;
    datetimeinput?: FormElementDatetimeinputSubmissionElementValueInput | null;
    matrixinput?: FormElementMatrixinputSubmissionElementValueInput | null;
    captcha?: FormElementCaptchaSubmissionElementValueInput | null;
}
export interface FormSubmissionMatrixChoiceSelectedInput {
    rowId: string;
    columns: string[];
}
export interface FormSubmissionMatrixInputValueInput {
    rowId: string;
    columnId: string;
    value: string;
}
export interface IntegrationCustomDataInput {
    id: string;
    tagName: string;
    elementId: string;
}
export interface PaginationInput {
    with?: PaginationTypeEnum | null;
    orderby?: string | null;
    page?: number | null;
    first?: number | null;
    last?: number | null;
    after?: string | null;
    before?: string | null;
}
export interface SiteSettingsAppearanceConfigInput {
    defaultTheme: string;
    defaultControlType: SettingsAppearanceControlTypeEnum;
    darkMode: DarkThemeModeEnum;
    renderInShadow: boolean;
    customCss: string;
    customStyleLinks: string[];
}
export interface SiteSettingsInput {
    appearance?: SiteSettingsAppearanceConfigInput | null;
    system?: SiteSettingsSystemConfigInput | null;
    sentry?: SiteSettingsSentryConfigInput | null;
    standalonePages?: SiteSettingsStandalonePagesConfigInput | null;
    userPortal?: SiteSettingsUserPortalConfigInput | null;
    summary?: SiteSettingsSummaryConfigInput | null;
    userPortalSkeleton?: string | null;
    summaryGeneralSSR?: string | null;
}
export interface SiteSettingsSentryConfigInput {
    enabled: boolean;
    dsn: string;
    showFeedbackUI: boolean;
    integrateFrontendApp: boolean;
    integrateAdminApp: boolean;
    integrateGraphQLAPI: boolean;
}
export interface SiteSettingsStandalonePagesConfigInput {
    beforeBodyHTML: string;
    afterBodyHTML: string;
    headHTML: string;
}
export interface SiteSettingsSummaryConfigInput {
    pageTitle: string;
    formLabel: string;
}
export interface SiteSettingsSystemConfigInput {
    summaryPage: string;
    portalPage: string;
    sandboxAdminPage: boolean;
    preferStandaloneAdmin: boolean;
    removeDataWhenUninstalling: boolean;
    allowedHeadlessOrigins: string;
}
export interface SiteSettingsUserPortalConfigInput {
    pageTitle: string;
    welcomeLabel: string;
    welcomeMetaSingular: string;
    welcomeMetaPlural: string;
    welcomeNoSubmissions: string;
}
export interface SubmissionFilterInput {
    search?: string | null;
    category?: string | null;
    asAdmin: boolean;
    formOwner?: string | null;
    submissionOwner?: string | null;
    formId?: string | null;
    startDate?: string | null;
    endDate?: string | null;
    resourceView?: ResourceViewModeEnum | null;
}
export interface SubmissionInput {
    formId: string;
    elements: FormSubmissionElementInput[];
    urlTrack?: string | null;
    referer?: string | null;
    time?: number | null;
}
